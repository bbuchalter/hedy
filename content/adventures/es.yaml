adventures:
    default:
        name: "Introducción"
        description: "Nivel de explicación"
        default_save_name: "intro"
        levels:
            1:
                story_text: |
                    ¡Bienvenido a Hedy! En el Nivel 1 puedes usar los comandos `{print}`,` {ask}` y `{echo}`.

                    En el lado izquierdo de tu pantalla están todos los comandos del Nivel 1.

                    ¡Presiona el botón azul y el código será escrito automáticamente!

                    Prueba el código con el botón verde 'Ejecutar código' debajo del espacio de programación de la izquierda.

                    ¿No sabes qué crear? En las siguientes pestañas encontrarás algunas ideas en las que inspirarte.
                start_code: "{print} hola mundo!"
                example_code: "```\n{print} Hola!\n{print} Bienvenido a Hedy!\n```\n"
                story_text_2: "También puedes solicitar  entrada y repetirla usando el comando`{echo}`.\nPrueba el código a tu izquierda de nuevo.\n\n¿No sabes qué crear? En las siguientes pestañas vas a encontrar ideas de programas para construir.\n"
                example_code_2: "```\n{ask} ¿Cuál es tu nombre?\n{echo} hola\n```\n"
                story_text_3: "¡Empezemos! ¿No sabes que crear? En las siguientes pestañas encontrarás ideas sobre programas que puedes construir.\n"
            2:
                story_text: |
                    En el nivel 2 aprendemos algo nuevo. Puedes nombrar una palabra con `{is}`.

                    Si pones el código en la parte superior de tu programa, puedes usar `nombre` en cualquier parte y será reemplazado por Hedy:

                    ```
                    nombre {is} Hedy
                    {print} Bienvenido nombre
                    ```

                    Nota: `{ask}` ha cambiado en el nivel 2, también puedes guardar la respuesta con un nombre:

                    ```
                    respuesta {is} {ask} ¿Cómo te llamas?
                    ```

                    `{print}` sigue funcionando como en el nivel 1, así que ya no necesitas usar `{echo}`.
                start_code: "{print} hola mundo!"
                example_code: "```\nnombre {is} Hedy\nedad {is} 15\n{print} nombre tiene edad años\n```\n"
                story_text_2: "El comando `{print}` sigue funcionando igual, pero el comando `{ask}` ha cambiado. Ahora hay que utilizar una variable en el comando `{ask}`. Algo como esto:\n"
                example_code_2: "```\nrespuesta {is} {ask} ¿Cuál es tu nombre?\n{print} Hola respuesta\n```\n"
                story_text_3: "Otro comando nuevo en este nivel es `{sleep}`, que pausa el programa durante un segundo. Si escribes un número detrás del comando {sleep}, el programa se detiene durante esa cantidad de segundos.\n"
                example_code_3: "```\n{print} Mi color favorito es...\n{sleep} 2\n{print} ¡verde!\n```\n"
            3:
                story_text: |
                    En el nivel 3 también puedes hacer una lista. Puedes dejar al ordenador escoger algo aleatorio de la lista, usando `{at} {random}` (se pronuncia: et ren-dom).
                start_code: "{print} hola mundo!"
                story_text_2: También puedes añadir elementos a una lista con `{add}` y quitar elementos con `{remove}`.
                example_code_2: "```\nanimales {is} perro, gato, canguro\n{add} pingüino {to_list} animales\n{remove} gato {from} animales\n{print} animales {at} {random}\n```\n"
                example_code: "```\nanimales {is} perro, gato, canguro \n{print} animales {at} {random}\n```\n"
            4:
                story_text: |
                    En el nivel 4 `{ask}` y `{print}` funcionan diferente.

                    Debes poner el texto que quieras imprimir entre comillas.

                    Esto es útil, porque ahora puedes imprimir todas las palabras que quieras. También las palabras que usaste para almacenar algo con `{is}`.

                    La mayoría de los lenguajes de programación también utilizan comillas al imprimir, ¡por lo que nos estamos acercando un paso más a la programación real!

                    ## Las tareas son cada vez más difíciles
                    Encontrarás de nuevo los comandos a la izquierda y las tareas en las siguientes pestañas. Las tareas serán cada vez más difíciles.
                    Así que lo mejor es empezar por la izquierda con la historia y continuar hacia la derecha para que los desafíos sean cada vez mayores.
                start_code: "{print} 'Hola mundo'"
                example_code: "```\n{print} '¡Necesitas usar comillas de ahora en adelante!'\nrespuesta {is} {ask} '¿Que necesitamos usar de ahora en adelante?'\n{print} ' Necesitamos usar ' respuesta \n```\n"
                story_text_2: "## Las aventuras son cada vez más difíciles\nLas aventuras son cada vez más difíciles en las sucesivas pestañas.\nAsí que es mejor empezar por la izquierda, y seguir hacia la derecha, para que los retos sean cada vez mayores.\n"
            5:
                start_code: |-
                    nombre {is} {ask} '¿Cómo te llamas?'
                    {if} nombre {is} Hedy {print} '¡genial!' {else} {print} 'meh'
                story_text: |
                    `{ask}` y `{print}` siguen funcionando como en el nivel 4.

                     En el nivel 5 hay algo nuevo, el `{if}`! `{if}` significa `si` en inglés. Con el `{if}` puedes elegir entre dos opciones.

                     ## Ejemplo de código Hedy
                     ```
                     nombre {is} {ask} '¿Cómo te llamas?'
                     {if} nombre {is} Hedy {print} 'bien' {else} {print} 'buu'
                     ```

                     Este código imprime bien si introduces Hedy como nombre, y buu si introduces algo distinto.

                     ## Las tareas son cada vez más difíciles

                     También en el nivel 5, las tareas en las pestañas se vuelven cada vez más difíciles. Así que hazlas de izquierda a derecha.
                example_code_2: "```\nnombre {is} {ask} '¿Cuál es tu nombre?'\n{if} nombre {is} Hedy {print} 'bien'\n{else} {print} '¡buuu!'\n```\n"
                story_text_3: "## Listas\nCuando queremos comprobar si algo está en una lista, podemos usar el comando `{in}`.\nEste código imprime ¡bonito! si se elige el verde o el amarillo, y meh en caso contrario.\n"
                example_code: "```\nnombre {is} {ask} '¿Cuál es tu nombre?'\n{if} nombre {is} Hedy {print} 'bien' {else} {print} 'buu'\n```\n"
                example_code_3: "```\ncolores_bonitos {is} verde, amarillo\ncolor {is} {ask} '¿Cuál es tu color favorito?'\n{if} color {in} colores_bonitos {print} ''¡bonito!'\n{else} {print} 'meh'\n```\n"
                story_text_2: "A veces el código con un `{if}` se hace muy largo y no cabe bien en la línea. <br> También puedes dividir el código en dos líneas, empezando la segunda línea en el `{else}` así:\n"
            6:
                start_code: "{print} '5 veces 5 es ' 5 * 5"
                story_text: |
                    `{ask}`,` {print}` y `{if}` siguen funcionando como en los niveles 5.
                     Pero en el nivel 6 hay algo nuevo, ahora también puedes calcular.

                     El signo más es fácil, lo escribes como en las matemáticas: `5 + 5` por ejemplo. El signo menos también funciona: `5 - 5`.

                     La multiplicación es un poco diferente, ya que no hay signo de multiplicación en el teclado. ¡Búscalo, verás que no lo hay!
                     Es por eso que usamos el asterisco para multiplicar: `5 * 5`. Lee esto como "5 veces 5", entonces lo recordarás con mayor facilidad.
                     ## Ejemplo de código Hedy
                     ```
                     {print} '5 más 5 es ' 5 + 5
                     {print} '5 menos 5 es ' 5 - 5
                     {print} '5 multiplicado por 5 es ' 5 * 5
                     ```
                example_code: "```\n{print} '5 más 5 es ' 5 + 5\n{print} '5 menos 5 es ' 5 - 5\n{print} '5 veces 5 es ' 5 * 5\n```\n"
                story_text_2: "¡También cambiamos cómo se guarda una palabra en una variable! Ahora se puede utilizar `=` en lugar de `{is}` cuando guardamos un nombre o un número en una variable, así:\n"
                example_code_2: "```\nnombre = Hedy\nrespuesta = 20 + 4\n```\n"
            7:
                start_code: "{repeat} 3 {times} {print} 'Hedy es divertido!'"
                story_text: |
                    ## nivel 7! nivel 7!
                    `{ask}`, `{print}` e `{if}` funcionan como en el nivel 5 y 6.
                    Pero en el nivel 7 hay algo nuevo: `{repeat}`.
                    Con `{repeat}` puedes repetir una línea de código varias veces.
                example_code: |
                    ```
                    {repeat} 3 {times} {print} '¡Hedy es divertido!'
                    ```
            8:
                start_code: |-
                    {repeat} 5 {times}
                        {print} 'Hola amigos'
                        {print} 'Esto se va a mostrar 5 veces'
                story_text: |
                    ## Indentación
                     `{ask}` y `{print}` siguen funcionando igual. Pero `{if}`, `{else}` y `{repeat}` han cambiado.
                    Ahora puedes ejecutar grupos de código juntos, pero tendrás que *indentar* el código.
                    Esto signfica que es necesario poner 4 espacios al principio de la línea. Esto también se aplica cuando solo deseas crear un bloque de una línea.
                example_code: |
                    Así es como funciona ahora el comando `{repeat}`:
                    ```
                    {repeat} 5 {times}
                        {print} 'Hola a todos'
                        {print} 'Esto se repite 5 veces'
                    ```
                    Así es como funcionan ahora los comandos `{if}` y `{else}`:

                    ```
                    nombre {is} {ask} '¿Cuál es tu nombre?'
                    {if} nombre {is} Hedy
                        {print} 'Bienvenida Hedy'
                        {print} '¡Puedes jugar con tu ordenador!'
                    {else}
                        {print} '¡Intruso!'
                        {print} '¡No puedes usar este ordenador!'
                    ```
            9:
                start_code: "{repeat} 3 {times}\n    comida = {ask} '¿Qué quieres comer?'\n    {if} comida {is} 'pizza'\n        {print} '¡bien!'\n    {else}\n        {print} 'pizza es mejor'"
                story_text: "In this level you can not only use multiple lines with `{if}` {and} `{repeat}`, but you can also put them together!\nIn the example you see an `{if}` command within a `{repeat}` command. It is also allowed the other way around, and an `{if}` is also allowed in an `{if}` and a `{repeat}` in a `{repeat}`.\nGive it a try!"
                example_code: "```\n{repeat} 3 {times}\n    food = {ask} 'What do you want?'\n    {if} food {is} pizza\n        {print} 'nice!'\n    else\n        {print} 'pizza is better'\n```\n"
            10:
                story_text: "In this level we learn a new code called `{for}`. With `{for}` you can make a list and use all elements.\n`{for}` creates a block, like `{repeat}` and `{if}` so all lines in the block need to start with spaces."
                start_code: "animales {is} perros, gatos, peces\n{for} animal {in} animales\n  {print} 'Me gustan los  ' animal"
                example_code: "```\nanimals {is} dog, cat, blobfish\n{for} animal {in} animals\n  {print} 'I love ' animal\n```\n"
            11:
                start_code: "{for} contador {in} {range} 1 {to} 5\n    {print} contador"
                story_text: '## Bucles

                    `{print}` funciona igual pero añadimos una nueva forma del `{for}`. Ahora puedes escribir `{for} contador {in} {range} 1 {to} 5` y utilizar `contador` en tu programa.

                    Pruébalo para ver qué pasa. Recuerda usar indentaciones después de las instrucciones `{for}` y `{if}` (Eso significa empezar una línea con cuatro espacios)'
                example_code: "```\nfor counter in range 1 to 5\n    print counter\n```\n"
            12:
                start_code: "{print} 'los números decimales ahora necesitan usar un punto'\n{print} 2.5 + 2.5"
                story_text: "## Decimal numbers\nSo far, Hedy did not allow for decimal numbers like 1.5, but now we do allow that. Note that computers use the `.` for decimal numbers.\n```\n{print} 'Two and a half plus two and a half is...'\n{print} 2.5 + 2.5\n```\n## All texts need to be in quotation marks\nFor this level on you will also have to use quotation marks when storing a text with `=`:\n\n```\nname = 'Hedy the Robot'\n{print} 'Hello ' name\n```\n## All items in lists need quotation marks too\nLists are texts, so they need quotation marks too. Mind that each single item on the list has quotation marks.\nThis allows you to save two words as 1 item on the list, for example 'Iron Man'.\n\n```\nsuperheroes = 'Spiderman', 'Batman', 'Iron Man'\n{print} superheroes {at} {random}\n```\n## All text after `{if}` comparisons need quotation marks too\n```\nname = {ask} 'What is your name?'\n{if} name = 'Hedy the Robot'\n    {print} 'Hi there!'\n```\n## Numbers don't need quotation marks\n{for} numbers, you do not use quotation marks in the `=`:\n```\nscore = 25\n{print} 'You got ' score\n```\n"
                example_code_2: "```\nnombre = 'Hedy el Robot'\n{print} 'Hola ' nombre\n```\n"
                example_code: "```\n{print} 'Two and a half plus two and a half is...'\n{print} 2.5 + 2.5\n```\n"
                story_text_2: "**Todos los textos deben ir entre comillas**.\nA partir de este nivel también tendrás que usar comillas cuando guardes un texto con `=`:\n"
                story_text_3: "**Todos los elementos de las listas también necesitan comillas**.\nLas listas son textos, por lo que también necesitan comillas. Ten en cuenta que cada elemento de la lista lleva comillas.\nEsto te permite guardar dos palabras como un elemento de la lista, por ejemplo \"Iron Man\".\n"
                example_code_3: "```\nsuperheroes = 'Spiderman', 'Batman', 'Iron Man'\n{print} superheroes {at} {random}\n```\n"
                story_text_4: "**Todo los textos después de las instrucciones `{if}` también necesita comillas**.\n"
                example_code_4: "```\nnombre = {ask} '¿Cuál es tu nombre?'\n{if} nombre = 'Hedy el Robot'\n    {print} '¡Hola!'\n```\n"
                story_text_5: "**Los números no necesitan comillas**.\nCon los números no se utilizan las comillas en el `=`:\n"
                example_code_5: "```\npuntuacion = 25\n{print} 'Tu puntación es ' puntuacion \n```\n"
                story_text_6: "**Matemáticas con palabras** \nEn este nivel también se permite utilizar el signo + con los textos. Por ejemplo:"
                example_code_6: "```\na = '¡Hola '\nb = 'mundo!'\n{print} a + b\n```\n"
            13:
                start_code: "nombre = {ask} '¿Cuál es tu nombre?'\nedad = {ask} '¿Cuántos años tienes?'\n{if} nombre {is} 'Hedy' {and} edad {is} 2\n    {print} '¡Eres la verdadera Hedy!'"
                story_text: We are now going to learn `{and}` and `{or}`! If you want to check two statements, you don't have to use two if's but can use `{and}` and `{or}`. If you use `{and}`, both statements, left and right of the `{and}` need to be true. We can also use `{or}`. Then only one statement needs to be correct.
                example_code: "```\nname = ask 'what is your name?'\nage = ask 'what is your age?'\nif name is 'Hedy' and age is 2\n    print 'You are the real Hedy!'\n```\n"
            14:
                start_code: "age = {ask} 'How old are you?'\n{if} age < 13\n    {print} 'You are younger than me!'\nelse\n    {print} 'You are older than me!'"
                story_text: "We are going to learn more new items. You might know them already from mathematics, the `<` and `>`.\nThe `<` checks if the first number is smaller than the second, for example `age < 12` checks if `age` {is} smaller than 12.\nIf you want to check if the first number is smaller or equal to the second, you can use `<=`, for example `age <= 11`.\nThe `>` checks if the first number is bigger than the second, for example `points > 10` checks if `points` is larger than 10.\nIf you want to check if the first number is bigger or equal to the second, you can use `>=`, for example `points >= 11`.\nYou use these comparisons in an `{if}`, like this:\n```\nage = {ask} 'How old are you?'\n{if} age > 12\n    {print} 'You are older than I am!'\n```\n\nFrom this level on, if you want to compare exactly, you can use two equal signs. This is what most programming languages do:\n```\nname = {ask} 'What is your name?'\n{if} name == 'Hedy'\n    {print} 'You are coo!'\n```\n\nYou can also compare if something is *not* equal to something else using `!=` like this:\n```\nname = {ask} 'What is your name?'\n{if} name != 'Hedy'\n    {print} 'You are not Hedy'\n```\n"
                example_code: "```\nage = {ask} 'How old are you?'\n{if} age > 12\n    {print} 'You are older than I am!'\n```\n"
                story_text_2: "From this level on, if you want to compare exactly, you can use two equal signs. This is what most programming languages do:\n"
                example_code_2: "```\nname = {ask} 'What is your name?'\n{if} name == 'Hedy'\n    {print} 'You are coo!'\n```\n"
                story_text_3: "You can also compare if something is *not* equal to something else using `!=` like this:\n"
                example_code_3: "```\nname = {ask} 'What is your name?'\n{if} name != 'Hedy'\n    {print} 'You are not Hedy'\n```\n"
            15:
                start_code: "answer = 0\n{while} answer != 25\n    answer = {ask} 'What is 5 times 5?'\n{print} 'A correct answer has been given'"
                story_text: "We are going to learn a new loop, the `{while}` loop! We continue the loop as long as the statement is true.\nSo don't forget to change the value in the loop.\n\nIn the example code, we continue until a correct answer has been given.\nIf the correct answer is never given, the loop never ends!\n"
                example_code: "```\nanswer = 0\nwhile answer != 25\n    answer = ask 'What is 5 times 5?'\nprint 'A correct answer has been given'\n```\n"
            16:
                start_code: "fruit = ['apple', 'banana', 'cherry']\n{print} fruit"
                story_text: "We are going to make lists the Python way, with square brackets around the lists! We also keep the quotation marks around each item like we have learned in previous levels.\nYou can use the square brackets as well to point out a place in the lists.\n\n```\nfriends = ['Ahmed', 'Ben', 'Cayden']\nlucky_numbers = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} 'the lucky number of ' friends[i]\n    {print} 'is ' lucky_numbers[i]\n```\n"
                example_code: "```\nfriends = ['Ahmed', 'Ben', 'Cayden']\nlucky_numbers = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} 'the lucky number of ' friends[i]\n    {print} 'is ' lucky_numbers[i]\n```\n"
            17:
                start_code: "{for} i {in} {range} 1 {to} 10:\n    {print} i\n{print} 'Ready or not, here I come!'"
                story_text: "Now we are going to change indentation a little bit. Every time that we need an indentation, we need `:` at the line before the indentation.\n\nIn this level you can also use a new command: `{elif}`. `{elif}` is short for {else} {if} and you need it when you you want to make 3 (or more!) options.\nCheck it out!"
                example_code: "```\nprices = ['1 million dollars', 'an apple pie', 'nothing']\nyour_price = prices[{random}]\n{print} 'You win ' your_price\n{if} your_price == '1 million dollars' :\n    {print} 'Yeah! You are rich!'\n{elif} your_price == 'an apple pie' :\n    {print} 'Lovely, an apple pie!'\n{else}:\n    {print} 'Better luck next time..'\n```\n"
            18:
                start_code: "naam = 'Hedy'\n{print}('My name is ', naam)"
                story_text: "We arrived at real Python code! That means we need to use parentheses with {print} and {range} from now on.\nThat looks like this:\n```\n{print}('my name is Hedy!')\n```\nIf you want to print more thant one items, you need to separate them by commas.\n```\nnaam = 'Hedy'\n{print}('my name is ', naam)\n```"
                story_text_2: If you want to print more than one item, you need to separate them by commas.
                example_code_2: "```\ntemperature = 25\n{print}('Is is ', temperature, 'degrees outside')\n```\n"
                story_text_3: "##  Input\nThe final change we will need to make to get Python code is changing `{ask}` into `{input}`."
                example_code: "```\n{print}('my name is Hedy!')\n```\n"
                example_code_3: "```\n{print}('My name is Hedy!')\nname = {input}('What is your name?')\n{print}('So your name is ', name)\n```\n"
    story:
        name: "Una historia"
        description: "Una historia"
        default_save_name: "Historia"
        levels:
            1:
                story_text: |
                    ## Escribe una historia
                    En el nivel 1 puedes hacer una historia con un protagonista que tu eliges.

                    Puedes usar esta línea para comenzar tu programa:

                    ```
                    {ask} Quién es el protagonista de tu historia?
                    ```

                    En la segunda línea puedes empezar usando `{print}` si quieres imprimir una oración.
                    Puedes usar `{echo}` si quieres poner el nombre del protagonista al final de la oración.
                example_code: |
                    ```
                    {ask} El protagonista de esta historia es
                    {print} El protagonista camina por un bosque
                    {echo} Está bastante asustado
                    {print} Por todos lados se oyen extraños ruidos
                    {print} Él tiene miedo de que éste sea un bosque encantado
                    ```

                    ## Avance
                    No te parece algo limitante que el nombre del protagonista sólo pueda aparecer al final de la oración? En los niveles 2 y 3 puedes hacer cosas más interesantes con tu programa.

                start_code: "{print} Aquí comienza tu historia"
            2:
                story_text: |
                    ## Una historia
                    En el nivel 2 puedes hacer tu historia más divertida. El nombre de tu protagonista puede ahora ser usado en las oraciones de la historia.

                    Para eso debes realizar un poquito más de programación. Debes dar primero un nombre al protagonista de tu historia.

                    Puedes luego usar este nombre en las oraciones que siguen.
                example_code: |
                    ```
                    nombre {is} {ask} Cómo se llama el protagonista?
                    {print} nombre está caminando por el bosque
                    {print} nombre está bastante asustado
                    {print} Por todos lados se oyen extraños ruidos
                    {print} nombre tiene miedo de que éste sea un bosque encantado
                    ```

                start_code: "{print} Aquí viene tu historia!"
            7:
                story_text: |
                    ## Una historia
                    En una historia, a veces es necesario repetir algo. Por ejemplo, si alguien pide ayuda, o si se canta una canción.
                    Eso lo puedes hacer ahora en el nivel 6 usando `{repeat}`.
                example_code: |
                    ```
                    {print} 'La princesa grita pidiendo ayuda'
                    {repeat} 5 {times} {print} 'Ayuda!'
                    {print} 'Por qué nadie viene en mi ayuda?'
                    ```

                start_code: "{repeat} 5 {times} {print} 'Ayuda!'"
            5:
                story_text: |
                    ## Una historia
                    Lo que también puedes hacer para hacer tu historia todavía más interesante es darle distintos finales posibles.

                    Escribe una historia con dos finales, por ejemplo:

                    - La princesa camina por el bosque
                    - Ella se topa con un monstruo

                    - Final feliz: ella desenfunda su espada y el monstruo se va corriendo
                    - Final triste: el monstruo se come a la princesa

                    Puedes también hacer que se ingrese un nombre para el protagonista. Eso sigue funcionando igual que en el nivel 3. Puedes combinar eso con un `{if}`.
                example_code: |
                    ```
                    nombre {is} {ask} 'Quién camina por el bosque?'
                    {print} nombre ' camina por el bosque'
                    {print} nombre ' se topa con un monstruo'
                    final {is} {ask} 'Quieres un final feliz o un final triste?'
                    {if} final {is} feliz {print} nombre ' desenfunda su espada y el monstruo se va corriendo' {else} {print} 'El monstruo se come a ' nombre
                    ```
                start_code: "{print} 'Aquí viene tu historia!'"
            4:
                story_text: |
                    ## Una historia
                    Tal vez hayas notado un problema con el nivel 2.

                    Haz por casualidad probado escribir una oración donde está incluída la palabra "nombre"? Por ejemplo: `{print} mi nombre es nombre`.

                    Lamentablemente eso no va a funcionar! Como resultado de ese ejemplo, obtendrás: `mi Manuel es Manuel`. Pero ahora puedes resolver este problema en el nivel 3.

                    Para ello ahora debes usar comillas para rodear los textos que deseas imprimir.
                example_code: |
                    ```
                    nombre {is} Carlos
                    {print} 'El protagonista de esta historia es' nombre
                    {print} nombre ' está caminando por el bosque'
                    {print} nombre ' está bastante asustado'
                    animales {is} búho, águila, armadillo
                    {print} 'Él escucha el ruido de un' animales {at} {random}
                    {print} nombre 'tiene miedo de que éste sea un bosque encantado'
                    ```
                start_code: "{print} 'Aquí viene tu historia!'"
            3:
                story_text: |4


                    ## Elementos al azar
                    Puedes también agregar elementos al azar en tu historia. Por ejemplo, un monstruo, animal u otro obstáculo.

                    Por ejemplo:
                    ```
                    animales {is} búho, águila, armadillo
                    {print} Él escucha el ruido de un animales {at} {random}
                    ```
                start_code: "{print} Aquí viene tu historia!"
                example_code: |
                    ```
                    animales {is} 🦔, 🐿, 🦉, 🦇
                    {print} Él ahora escucha el ruido de un animales {at} {random}
                    ```
                story_text_2: |
                    The command `{add}` can also come in handy in your story. For example

                example_code_2: |4

                    {print} He hears a sound
                    animals {is} 🐿, 🦔, 🦇, 🦉
                    animal {is} {ask} What do you think it is?
                    {add} animal {to_list} animals
                    {print} it was a animals {at} {random}
                    ```
                story_text_3: |
                    Este es un ejemplo del comando `{remove}`en tu historia
                example_code_3: |
                    ```
                    {print} Su mochila se hizo muy pesada.
                    {print} Dentro de ella había una botella de agua, una linterna y un ladrillo
                    bolso {is} agua, linterna, ladrillo
                    botar {is} {ask} ¿Que artículo debería botar él?
                    {remove} botar {from} bolso
                    ```
            9:
                story_text: "## Historia\nEn este nivel puedes usar anidamiento para poner comandos {if}, {repeat} o {for} dentro de otros comandos {if}, {repeat} o {for}. Esto te permite muchas opciones y te ayuda a hacer tu historia más interactiva.\n"
                story_text_2: "El ejemplo de arriba es bastante sencillo, pero con la anidación puedes realmente elaborar tu código y convertir la historia en un juego real. ¡Mira este ejemplo!\n"
                example_code: "```\n{print} 'Robin está caminando hacia el centro de la ciudad'\nlugar = {ask} '¿Robin va a ir a una tienda, o va a ir a casa?'\n{if} lugar {is} tienda\n    {print} 'Ella entra en la tienda.'\n    {print} 'Robin ve un libro que luce interesante'\n    libro = {ask} '¿Compra el libro Robin?'\n    {if} libro {is} si\n        {print} 'Robin compra el libro y se va a casa'\n    {else}\n        {print} 'Robin deja la tienda y se va a casa'\n{else}\n    {print} 'Robin se va a casa'\n```\n"
                example_code_2: "## Elabora el código\n```\nespada = perdida\njuego = en marcha\n{print} 'Nuestra heroína está caminando en el bosque'\n{print} 'El camino se divide en dos'\n{repeat} 2 {times}\n    {if} juego {is} en marcha\n        camino = {ask} '¿Cuál camino debería escoger ella?'\n        {if} camino {is} izquierda\n            {if} espada {is} encontrada\n                {print} '¡Nuestra heroína se encuentra a un dragón!'\n                {print} '¡Por suerte nuestra heroína tiene una espada para vencer a la bestia!'\n                juego = finalizado\n            {else}\n                {print} '¡Nuestra heroína se encuentra a un dragón, pero no tiene ningún arma!'\n                {print} 'Nuestra heroína es vencida por el dragón...'\n                {print} 'Intenta de nuevo'\n                juego = finalizado\n        {if} camino {is} derecha\n            {if} espada {is} perdida\n                {print} 'Nuestra heroína se encuentra una espada'\n                {print} 'Esto podría ser muy útil'\n                espada = encontrada\n            {else}\n                {print} 'Ya encontraste la espada. No queda nada aquí.'\n                {print} 'Ella se devuelve'\n```\n"
                start_code: '# coloca tú código aquí'
            12:
                story_text: "## Historia\nEn este nivel puedes usar las comillas para almacenar múltiples en una variable.\n"
                example_code: "```\nnombre = 'La Reina de Inglaterra'\n{print} nombre ' estaba comiendo un pedazo de pastel, cuando de pronto...'\n```\n"
                start_code: '# coloca tu código aquí'
            8:
                story_text: "## Historia\nEn este nivel puedes usar múltiples líneas en tu comandos {if}, ¡de esta manera puedes mejorar tu final triste o feliz!\n"
                example_code: "```\n{print} '¡OH NO! ¡El T-rex se está acercando!'\nfinal = {ask} '¿Quieres un final triste o feliz?'\n{if} final {is} feliz\n    {print} 'Justo a tiempo Richard salta de vuelta en la máquina del tiempo!'\n    {print} 'Michael escribe el código y...'\n    {print} '\U0001F4A5¡ZAP!\U0001F4A5'\n    {print} 'Están de vuelta en su garage'\n{else}\n    {print} 'Michael grita ¡VAMOS RICHARD! ¡CORRE MÁS RÁPIDO!'\n    {print} 'Pero Richard es muy lento...'\n    {print} '¡El T-rex se acerca y se lo come en un una gran mordida!\U0001F996'\n```\n"
                start_code: '# coloca tu código aquí'
            15:
                story_text: "## Historia\nUsando el bucle `{while}` puedes hacer que tus historias sean más interesantes. Por ejemplo, puedes usar `{while} juego {is} 'en marcha'` de forma que puedas jugar hasta que el juego se ha acabado.\nO puedes usar `{while} espada {is} 'perdida'` de forma que el jugador no pueda continuar el juego hasta que haya encontrado algo.\n"
                example_code: "```\nkeys = 'lost'\n{print} 'You are standing in your garden and you have lost your keys.'\n{print} 'Where do you want to look for them?'\n{print} 'You can choose: tree, flowerbed, rock, postbox'\n{while} keys == 'lost'\n    location = {ask} 'Where do you want to look?'\n    {if} location == 'flowerbed'\n        {print} 'Here they are!'\n        keys = 'found'\n    {else}\n        {print} 'Nope they are not at the ' location\n{print} 'Now you can enter the house!'\n"
                start_code: '# coloca tú código aquí'
            13:
                example_code: "```\nespada = 'perdida'\njuego = 'en marcha'\n{print} 'Nuestra heroína está caminando en el bosque'\n{print} 'El camino se divide en dos'\n{for} i {in} {range} 0 {to} 2\n    {if} juego {is} 'en marcha'\n        camino = {ask} '¿Que camino debería escoger ella?'\n        {if} path {is} 'izquierda' {and} espada {is} 'encontrada'\n            {print} '¡Nuestra heroína se encuentra a un dragón!'\n            {print} '¡Por suerte nuestra heroína tiene una espada para vencer a la bestia!'\n            juego = 'acabado'\n        {if} camino {is} 'izquierda' {and} espada {is} 'perdida'\n            {print} '¡Nuestra heroína, encuentra un dragón, pero no tiene ningún arma!'\n            {print} 'Nuestra heroína es vencida por el dragón...'\n            {print} 'Intenta de nuevo'\n            game = 'acabado'\n        {if} camino {is} 'derecha' {and} espada {is} 'encontrada'\n            {print} 'Ya encontraste la espada. No queda nada aquí.'\n            {print} 'Ella camina de vuelta'\n        {if} camino {is} 'derecha' {and} espada {is} 'perdida'\n            {print} 'Nuestra heroína encuentra una espada'\n            {print} 'Esto podría resultar muy útil'\n            espada = 'encontrada'\n```\n"
                story_text: "## Story\nUsando los comandos `{and}` y `{or}`puedes acortar tus historias. Por ejemplo, mira la historia del dragón.\n"
                start_code: '# coloca tu código aquí'
            10:
                story_text: "## Historia\nEn este nivel puedes usar el comando {for} en tu historia. De esta manera puedes programar fácimelmente el libro para niños 'oso pardo, oso pardo, ¿qué ves?'\n"
                example_code: "```\nanimales = pájaro rojo, oveja negra, rana verde, pato amarillo, niño pequeño\n{print} 'oso pardo'\n{print} 'oso pardo'\n{print} '¿Qué ves?'\n{for} animal {in} animales\n    {print} 'Veo a un ' animal ' viéndome'\n    {print} animal\n    {print} animal\n    {print} '¿Qué ves?'\n{print} '¡Veo a todos los animales viéndome!'\n```\n"
                start_code: '# coloca tu código aquí'
    songs:
        name: "Canción"
        description: "Imprime una canción"
        default_save_name: "Canción"
        levels:
            8:
                story_text: |
                    ## Canciones
                    En nivel 6 has programado la canción 'Bottles of beer'. Hiciste un versículo y entonces tenías que copiar los versículos 99 veces. En nivel 7 puede repetir la canción 99 veces, ¡simplemente agregando una línea simplee!
                example_code: |
                    ```
                    versículo {is} 99
                    {repeat} 99 {times}
                        {print} versículo ' botellas de cerveza en la pared'
                        {print} versículo ' botellas de cerveza'
                        {print} 'Tomar uno abajo, pásalo alrededor'
                        versículo {is} versículo - 1
                        {print} versículo ' botellas de cerveza en la pared'
                    ```

                start_code: "# place your code here"
            7:
                story_text: |
                    ## Canciones
                    En las canciones hay a menudo mucha repetición. Por ejemplo, hay canciones que repiten con números.
                    Por ejemplo, la canción de los elefantes que se balancean! Ahora puedes programar esa canción programando con números.
                example_code: |
                    ```
                    elefantes {is} 2
                    {print} elefantes ' se balanceaban sobre la tela de una araña'
                    {print} 'como veian que resistia, fueron a buscar otro elefante'
                    elefantes {is} elefantes + 1
                    ```
                    Puedes repetir las líneas 2 a 4 tantas veces como quieras, simplemente copiándolas y pegándolas debajo de las que ya escribiste.

                    Por supuesto, puedes también programar otras canciones. Hay muchas canciones que usan números.
                    Tal vez podría interesarte programar la canción "99 botellas en la pared"! En esa canción, contamos para atrás en vez de para adelante.

                    # Avance
                    En el nivel 5 hemos aprendido un comando para repetir, `{repeat}`, que se puede usar de la siguiente manera:

                    * `{repeat} 3 {times} {print} 'Bebé Tiburón Tutududududu'`

                    Pero como tal vez hayas notado en esta lección, a veces tenemos que repetir múltiples líneas, no solamente una. Eso puede hacerse copiando y pegando, pero eso da mucho trabajo. En el nivel 7 veremos como hacerlo más fácilmente.
                start_code: "{print} 'Bebe Tiburón'"
            6:
                story_text: |
                    ## Canciones
                    En las canciones hay a menudo mucha repetición. Por ejemplo, Bebé Tiburón! En esa canción cantan siempre lo mismo:

                    Bebé Tiburón tututudutudu <br>
                    Bebé Tiburón tututudutudu <br>
                    Bebé Tiburón tututudutudu <br>
                    Bebé Tiburón

                    Puedes acortar mucho este programa usando el comando `{repeat}`! Puedes intentar escribir el programa?
                example_code: |
                    ```
                    {repeat} _ _ {print} 'Bebé Tiburón tututudutudu'
                    {print} 'Bebe Tiburón'
                    ```

                    Luego puedes, por supuesto, programar otras canciones. Hay muchas canciones donde hay repetición.

                start_code: "{print} 'Una canción'"
            12:
                example_code: "```\nactions = 'clap your hands', 'stomp your feet', 'shout Hurray!'\n{for} action {in} actions\n    {for} i {in} {range} 1 {to} 2\n        {print} '{if} youre happy and you know it'\n        {print} action\n    {print} '{if} youre happy and you know it and you really want to show it'\n    {print} '{if} youre happy and you know it'\n    {print} action\n```\n"
                story_text: "## Sing a song!\nIn this song we can make it even easier to program '{if} you're happy and you know it, clap your hands'. Because we can put all of the actions in a variable, check it out:\n"
                start_code: '# place your code here'
            11:
                story_text: "## Songs\nIn this level you can use the `{for} i {in} {range}` command to make songs that use counting.\n"
                example_code: "## 5 little monkeys\n```\n{for} i {in} {range} 5 {to} 1\n    {print} i ' little monkeys jumping on the bed'\n    {print} 'One fell off and bumped his head'\n    {print} 'Mama called the doctor and the doctor said'\n    {if} i {is} 1\n        {print} 'PUT THOSE MONKEYS RIGHT TO BED!'\n    {else}\n        {print} 'NO MORE MONKEYS JUMPING ON THE BED!'\n```\n"
                start_code: '# place your code here'
            10:
                story_text: "## Songs\nIn this level you can easily make the childrens' song 'Five little monkeys'. Can you make the last chorus?\nYou can also make the whole baby shark song (including all the other sharks in the family) in only 6 lines!\nOr you can make Old McDonald with all the different animals.\n"
                example_code: "## 5 Little Monkeys Jumping on the bed\n```\nmonkeys = 5, 4, 3, 2\n{for} monkey {in} monkeys\n    {print} monkey ' little monkeys jumping on the bed'\n    {print} 'One fell off and bumped his head'\n    {print} 'Mama called the doctor and the doctor said'\n    {print} 'NO MORE MONKEYS JUMPING ON THE BED!'\n```\n\n## Baby Shark\n```\nsharks = baby, mommy, daddy, grandma, grandpa\n{for} shark {in} sharks\n    {print} shark 'tututututudu'\n    {print} shark 'tututututudu'\n    {print} shark 'tututututudu'\n    {print} shark\n```\n## Old McDonald\n```\nanimals = pig, dog, cow\n{for} animal {in} animals\n    {if} animal {is} pig\n        sound = oink\n    {if} animal {is} dog\n        sound = woof\n    {if} animal {is} cow\n        sound = moo\n    {print} 'Old McDonald had a farm'\n    {print} 'E I E I O!'\n    {print} 'and on that farm he had a ' animal\n    {print} 'E I E I O!'\n    {print} 'with a ' sound sound ' here'\n    {print} 'and a ' sound sound ' there'\n    {print} 'here a ' sound\n    {print} 'there a ' sound\n    {print} 'everywhere a ' sound sound\n```\n"
                start_code: '# place your code here'
            16:
                story_text: "## Sing a song!\nIn this level, you can program a song like OldMacDonald even more quickly. You can connect the right animal to the right sound by simply putting them in the same place in the list.\nThe Drunken Sailor is also quickly made in this level. You only need 8 lines for the entire song, check it out!\n\n## Old MacDonald\n```\nanimals = ['pig', 'dog', 'cow']\nsounds = ['oink', 'woof', 'moo']\n{for} i {in} {range} 1 {to} 3\n    animal = animals[i]\n    sound = sounds[i]\n    {print} 'Old McDonald had a farm'\n    {print} 'E I E I O!'\n    {print} 'and on that farm he had a ' animal\n    {print} 'E I E I O!'\n    {print} 'with a ' sound sound ' here'\n    {print} 'and a ' sound sound ' there'\n    {print} 'here a ' sound\n    {print} 'there a ' sound\n    {print} 'everywhere a ' sound sound\n```\n\n## Drunken Sailor\n```\nlines = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']\n{for} line {in} lines\n    {for} i {in} {range} 1 {to} 3\n        {print} line\n    {print} 'early in the morning'\n    {for} i {in} {range} 1 {to} 3\n        {print} 'way hay and up she rises'\n    {print} 'early in the morning'\n```\n"
                start_code: '# place your code here'
                example_code: "## Old MacDonald\n```\nanimals = ['pig', 'dog', 'cow']\nsounds = ['oink', 'woof', 'moo']\n{for} i {in} {range} 1 {to} 3\n    animal = animals[i]\n    sound = sounds[i]\n    {print} 'Old McDonald had a farm'\n    {print} 'E I E I O!'\n    {print} 'and on that farm he had a ' animal\n    {print} 'E I E I O!'\n    {print} 'with a ' sound sound ' here'\n    {print} 'and a ' sound sound ' there'\n    {print} 'here a ' sound\n    {print} 'there a ' sound\n    {print} 'everywhere a ' sound sound\n```\n\n## Drunken Sailor\n```\nlines = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']\n{for} line {in} lines\n    {for} i {in} {range} 1 {to} 3\n        {print} line\n    {print} 'early in the morning'\n    {for} i {in} {range} 1 {to} 3\n        {print} 'way hay and up she rises'\n    {print} 'early in the morning'\n```\n"
    turtle:
        name: "La tortuga"
        description: "Haga su propio dibujo"
        default_save_name: "tortuga"
        levels:
            1:
                story_text: |
                    ## Dibujemos
                    En nivel 1 puede usar Hedy para dibujar también. Combinando giros y líneas, ¡puede hacer un cuadrado o una escalera!

                    Usando `{forward}` dibuja una línea hacia adelante. El numero detrás de él determina qué tan lejos caminará la tortuga. `{turn} right` gira un cuarto de vuelta en el sentido de las agujas del reloj, `{turn} left` gira en sentido contrario a las agujas del reloj.

                    Este es el comienzo de unas pequeñas escaleras. ¿Puedes llegar a 5 pasos?
                example_code: |
                    ```
                    {forward} 50
                    {turn} left
                    {forward} 50
                    {turn} right
                    ```


                start_code: "{forward} 50\n{turn} left"
                story_text_2: "## Colors\nYou can also change the color of the lines with the command `{color}`. Check out the example.\nYou can also use the command `{color} {white}` to make 'invisible' lines. You could use these white lines to move the turtle anywhere in the screen before you start drawing.\n"
                example_code_2: "```\n{color} {white}\n{forward} -80\n{color} {green}\n{forward} 50\n{color} {yellow}\n{forward} 50\n{color} {red}\n{forward} 50\n```\n"
            2:
                story_text: |
                    En nivel 1 la tortuga sólo podía girar a la izquierda o a la derecha. ¡Eso es un poco aburrido!
                    En nivel 2 puede apuntar su nariz en todas las direcciones.

                    Usa 90 para girar un cuarto. A esto lo llamamos grados. Un giro completo es de 360 grados.
                    ¿Puedes hacer una figura con este código? ¿Tal vez un triángulo o un círculo?
                example_code: |
                    ```
                    {print} Figuras de dibujo
                    ángulo {is} 90
                    {turn} ángulo
                    {forward} 25
                    {turn} ángulo
                    {forward} 25
                    ```



                start_code: |
                    {print} ¡Carrera de tortugas!
                    hoek {is} 90
                    {turn} hoek
                    {forward} 25
                story_text_2: "Also, in level 1 the turtle could only turn left or right. That is a bit boring!\nIn level 2 he can point his nose in all directions.\n\nUse 90 to turn a quarter. We call this degrees. A full turn is 360 degrees.\nCan you make a figure with this code? Maybe a triangle or a circle?\n"
                example_code_2: "```\n{print} Drawing figures\nangle {is} 90\n{turn} angle\n{forward} 25\n{turn} angle\n{forward} 25\n```\n"
            8:
                story_text: |
                    ## Dibujemos
                    hora que podemos repetir varias líneas, podemos hacer cifras más fácilmente.
                    Solo tenemos que establecer el ángulo una vez y luego usar esa variable en el `{repeat}`.
                example_code: |
                    ```
                    ángulo {is} 90
                    {repeat} 10 {times}
                        {turn} ángulo
                        {forward} 50
                    ```
                story_text_2: |
                    ## Interacción
                    También, ahora podemos mejorar el programa que dibuja diferentes figuras.
                    ¿Puedes averiguar hasta dónde tiene que llegar la tortuga aquí? ¡Termina el código y podrás dibujar cualquier polígono que quieras!
                example_code_2: |
                    ```
                    ángulos {is} {ask} '¿Cuántos ángulos debo dibujar?'
                    ángulo {is} 360 / ángulos
                    {repeat} ángulo {times}
                        girar _
                        adelante _
                    ```
                start_code: |
                    ángulos {is} {ask} '¿Cuántos ángulos debo dibujar?'
            7:
                story_text: |
                    ## Dibujemos
                    Enivel 6 puede repetir una línea de código con `{repeat}`.
                example_code: |
                    ```
                    {print} 'Dibujar figuras'
                    {repeat} 3 {times} {forward} 10
                    ```
                start_code: |
                    {print} 'Dibujar figuras'
                    {repeat} 3 {times} {forward} 10

            6:
                story_text: |
                    ## Dibujemos
                    En nivel 5 puede usar cálculos para dibujar diferentes figuras.
                    Es posible que haya aprendido en la escuela que girar un círculo completo es de 360 grados. Si no, ¡ahora ya lo sabes!
                    Es por eso que también usas 90 grados para un cuadrado. 360 dividido por 4 es 90.
                    Ahora que podemos hacer matemáticas con Hedy, ¡podemos dibujar todas las figuras que queramos!
                example_code: |
                    ```
                    ángulos {is} {ask} '¿Cuántos ángulos quieres?'
                    ángulo {is} 360 / ángulos
                    {forward} 50
                    {turn} ángulo
                    {forward} 50
                    {turn} ángulo
                    {forward} 50
                    {turn} ángulo
                    {forward} 50
                    {turn} ángulo
                    {forward} 50
                    {turn} ángulo
                    {forward} 50
                    {turn} ángulo
                    ```
                start_code: |
                    {print} 'Figuras de dibujo'
            5:
                story_text: |
                    ## Dibujemos
                    En nivel 4 puede elegir con `{if}`. Por ejemplo, entre diferentes tipos de figuras.
                example_code: |
                    ```
                    {print} 'Figuras de dibujo'
                    figura {is} preguntar '¿Quieres un cuadrado o un triángulo?'
                    {if} figura {is} triángulo ángulo {is} 120 {else} ángulo {is} 90
                    {turn} ángulo
                    {forward} 25
                    {turn} ángulo
                    {forward} 25
                    {turn} ángulo
                    {forward} 25
                    {turn} ángulo
                    {forward} 25
                    ```
                start_code: |
                    {print} 'Figuras de dibujo'
                    figura {is} {ask} '¿Quieres un cuadrado o un triángulo?'
                    {if} figura {is} triángulo ángulo {is} 120 {else} ángulo {is} 90                   {turn} ángulo
                    {forward} 25
            4:
                story_text: |
                    ## Dibujemos
                    En nivel 3 tienes que usar comillas con `{print}` y `{ask}`. ¡También al dibujar!
                example_code: |
                    ```
                    {print} 'Figuras de dibujo'
                    ángulo {is} 90
                    {turn} ángulo
                    {forward} 25
                    {turn} ángulo
                    {forward} 25
                    ```

                start_code: |
                    {print} 'Figuras de dibujo'
                    ángulo {is} 90
                    {turn} ángulo
                    {forward} 25

            3:
                story_text: |
                    ## Tortuga en busca
                    También puedes usar `{random}` con la tortuga de dibujo. Una elección aleatoria hace que la tortuga camine por un camino diferente cada vez..
                    Usar `{at} {random}` para elegir un valor de una lista. Puede copiar y pegar las líneas 2 y 3, así que cree una ruta aleatoria más larga.
                example_code: |
                    ```
                    ángulos {is} 10, 50, 90, 150, 250
                    {turn} ángulos {at} {random}
                    {forward} 25
                    ```

                start_code: |
                    {print} ¡Carrera de tortugas!
                    hoek {is} 90
                    {turn} hoek
                    {forward} 25
    dishes:
        name: "Platos"
        description: "Usa la computadora para ver quien ha de lavar los platos (Comienza en el nivel 2)"
        default_save_name: "Platos"
        levels:
            7:
                story_text: |
                    ## Programa de lavado de platos en el nivel 6
                    Cuán seguido lava los platos cada miembro de la familia? Es eso justo? Ahora podemos calcularlo.
                example_code: |
                    ```
                    personas {is} mama, papa, Maria, Carlos
                    lavados_de_carlos {is} 0
                    lavador {is} personas {at} {random}
                    {print} lavador ' debe lavar los platos'
                    {if} lavador {is} Carlos lavados_de_carlos {is} lavados_de_carlos + 1
                    {print} 'Carlos lavara los platos ' lavados_de_carlos ' veces esta semana'
                    ```

                    Si copias las líneas 3 a 5 unas siete veces, puedes contar cuantas veces te tocará lavar los platos.
                    Puedes escribir el programa para calcular la semana entera?

                    ## Avance
                    Escribir el programa para la semana entera require bastante copiar y pegar, no crees? Vamos a arreglar eso en el nivel 7.
                    Este nivel es el último de la aventura del lavado de platos! Pero puedes elegir otra aventura y programar cosas como una calculadora, una historia interactiva o un juego más interesante.
                start_code: "{print} 'Quien lavará los platos esta semana?'"
            6:
                story_text: |
                    ## Programa de lavado de platos en el nivel 5
                    Usando el comando `{repeat}` puedes repetir porciones de tu programa. De esa forma, puedes determinar quien ha de lavar los platos cada día de la semana.
                example_code: |
                    ```
                    personas {is} mamá, papá, María, Carlos
                    {repeat} _ _ {print} 'lavará los platos' _
                    ```
                start_code: "{print} 'Wie doet de afwas?'"
                story_text_2: "## Make it fair\nIf you are extremely unlucky the previous program might choose you to to the dishes for the whole week! That's not fair!\nTo create a fairer system you can use the `{remove}` command to remove the chosen person from the list. This way you don't have to do the dishes again untill everybody has had a turn.\n\nMonday and tuesday are ready for you! Can you add the rest of the week?\nAnd... can you come up with a solution for when your list is empty?\n"
                example_code_2: "```\npeople = mom, dad, Emma, Sophie\ndishwasher = people {at} {random}\n{print} 'Monday the dishes are done by: ' dishwasher\n{remove} dishwasher {from} people\ndishwasher = people {at} {random}\n{print} 'Tuesday the dishes are done by: ' dishwasher\n{remove} dishwasher {from} people\ndishwasher = people {at} {random}\n```\n"
            5:
                story_text: |
                    ## Programa de lavado de platos
                    Usando el comando `{if}` ahora puedes hacer tu programa todavía más interesante. Ahora tu programa puede reaccionar de acuerdo a la elección de quien lavará los platos.

                    Puede hacer que tu programa imprima 'oh no' si {is} tu turno de lavar los platos, y 'sí!' en caso de que no sea tu turno de lavar los platos?
                    No olvides las comillas!
                example_code: |
                    ```
                    personas {is} mamá, papá, María, Carlos
                    lavador {is} personas {at} {random}
                    {if} lavador {is} María {print} 'oh no, hoy me toca lavar los platos' {else} {print} 'por suerte no debo lavar los platos porque' _ 'los lavará hoy!'
                    ```

                start_code: "{print} 'Quien lavará los platos hoy?'"
            4:
                story_text: |
                    ## Programa de lavado de platos
                    Usando comillas puedes hacer más interesante tu programa.
                    Esta vez el programa de ejemplo no está completo.
                    Puedes completar el código reemplazando los guiones bajos con los comandos correctos y las comillas?
                    En cada guión bajo debes colocar un comando o una comilla.

                    Consejo: no olvides las comillas!                example_code: |
                    ```
                    personas {is} mamá, papá, Carlos, María
                    {print} _ los platos serán lavados por _
                    {print} personas {at} _
                    ```
                start_code: "{print} 'Quien lavará los platos hoy?'"
                example_code: "```\npeople {is} mom, dad, Emma, Sophie\n{print} _ the dishes are done by _\n{sleep}\n{print} people {at} _\n```\n"
            3:
                story_text: |
                    ## Programa de lavado de platos
                    Tienes en tu casa discusiones interminables sobre quien ha de lavar los platos hoy, o quien tiene que limpiar la caja del gato?

                    Ahora puedes dejar que la computadora elija honestamente a quien debe hacerlo. Puedes programar esto ahora en el nivel 2!

                    Primero debes hacer una lista con los miembros de tu familia. Luego puedes elegir a alguien de la lista usando el comando `{at} {random}`.
                example_code: |
                    ```
                    personas {is} mamá, papá, María, Carlos
                    {print} personas {at} {random}
                    ```

                    ## Avance
                    Haz por casualidad probado escribir una oración donde está incluída la palabra "personas"?

                    Por ejemplo: `{print} elijo a una de estas personas`. Puedes probarlo ahora si no lo has intentado todavía.

                    Eso no va a funcionar! Como resultado obtendrás: elijo a una de estas [papá, mamá, Carlos, María]. Puedes resolver este problema en el nivel 3.
                start_code: "{print} Quien lavará los platos hoy?"
                story_text_2: "## Hack the dishwashing program!\nDon't feel like doing the dishes yourself? Hack the program to remove your name from the list.\n"
                example_code_2: "```\npeople {is} mom, dad, Emma, Sophie\nyour_name {is} {ask} Who are you?\n{remove} your_name {from} people\n{print} people {at} {random} does the dishes\n```\n"
            10:
                example_code: "```\ndays = Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday\nnames = mom, dad, Emma, Sophie\n{for} day {in} days\n    {print} names {at} {random} ' does the dishes on ' day\n```\n"
                story_text: "## Dishwashing\nIn this level you could make an even better dish washing shedule.\n"
                start_code: '# place your code here'
    dice:
        name: "Dados"
        description: "Crea tu propio juego de dados"
        default_save_name: "Dados"
        levels:
            7:
                story_text: |
                    ## Dados
                    En el nivel 6 puedes nuevamente crear dados, pero ahora puedes contar cuántos puntos se han tirado ya.

                    Tal vez sepas que tirar un gusanito cuenta como 5 puntos. Ahora puedes tirar un dado y luego sumar cuántos puntos has obtenido ya. El siguiente ejemplo es para tirar un sólo dado:
                example_code: |
                    ```
                    opciones {is} 1, 2, 3, 4, 5, gusanito
                    puntaje {is} 0
                    tirada {is} opciones {at} {random}
                    {print} 'has tirado un ' tirada
                    {if} tirada {is} gusanito puntaje {is} puntaje + 5 {else} puntaje {is} puntaje + tirada
                    {print} 'Tu puntaje es ' puntaje ' puntaje'
                    ```
                    Puedes modificar el programa de manera que puedas calcular el puntaje si tiras el dado 8 veces? Para hacer eso deberás copiar y pegar algunas líneas de tu programa.

                    ## Avance

                    Haz podido modificar el programa correctamente? Escribir el programa para repetir el dado 8 veces require bastante copiar y pegar, no crees? Vamos a hacer eso más simple en el nivel 7!
                start_code: "{print} 'Qué salió esta vez?'"
            6:
                story_text: |
                    ## Dados
                    En el nivel 5 puedes nuevamente crear dados. Esta vez puedes usar el comando `{repeat}` para tirar varios dados a la vez.
                    Puedes usar el programa de ejemplo para terminar el juego!

                    Pero tal vez prefieras crear un dado distinto o sino inventar un juego completamente distinto.
                example_code: |
                    ```
                    opciones {is} 1, 2, 3, 4, 5, gusanito
                    {repeat} _ _ {print} _ _ _
                    ```

                start_code: "{print} 'Qué salió esta vez?'"
                example_code_2: "## Looking forward\n\nDid you manage to calculate the score for 8 dice? That required a lot of cutting and pasting, right? We are going to make that easier in level 7!\n"
            5:
                story_text: |
                    ## Dados
                    En el nivel 4 puedes nuevamente crear dados, y ahora puedes usar el comando `{if}`.
                    Puedes modificar el programa de ejemplo para que éste diga "Puedes dejar de tirar los dados" si el jugador ha obtenido un gusanito.
                    Pero tal vez prefieras crear un dado distinto o sino inventar un juego completamente distinto. Por ejemplo, puedes hacer que el juego responda de manera distinta. Por ejemplo, diciendo 'éxito' si arrojas un 6 o 'que injusticia!' si arrojas algo distinto.
                example_code: |
                    ```
                    opciones {is} 1, 2, 3, 4, 5, gusanito
                    tirada {is} _
                    {print} 'haz tirado un ' _
                    {if} _ {is} gusanito {print} 'Puedes dejar de tirar los dados' _ {print} 'Debes tirar los dados nuevamente!'
                    ```

                start_code: "{print} 'Qué salió esta vez?'"
            4:
                story_text: |
                    ## Dados
                    En el nivel 3 podemos crear oraciones que incluyan el valor obtenido de la tirada de dados, pero usando comillas.
                    Puedes escribir el programa, reemplazando los guiones bajos?                example_code: |
                    ```
                    opciones {is} 1, 2, 3, 4, 5, gusanito
                    {print} 'has tirado un ' _
                    {print} _ _ _ <- agregar código aquí
                    ```
                start_code: "{print} 'Qué salió esta vez?'"
                example_code: "```\nchoices {is} 1, 2, 3, 4, 5, earthworm\n{print} _ you threw _\n{print} _ _ _ <- here you have to program the choice\n```\n"
            3:
                story_text: |
                    ## Dados
                    En el nivel 2 puedes elegir elementos de una lista. De esa manera podemos hacer que se tiren los dados.

                    Dale una mirada a los juegos de mesa que tienes en tu casa.

                    Hay en tu casa juegos que usen un dado normal (o un dado especial)? Puedes crear los mismos dados con el siguiente programa.

                    Por ejemplo, los dados del juego Gusanitos, que tienen los números del 1 al 5, y en lugar de 6, un gusanito.

                    ![Dado con números del 1 al 5 y un gusanito en lugar del 6](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)
                example_code: |
                    ```
                    opciones {is} 1, 2, 3, 4, 5, gusanito
                    {print} opciones {at} {random}
                    ```

                    ## Avance
                    Haz por casualidad intentado escribir una oración que contenga la palabra "opciones"?

                    Por ejemplo, `{print} yo elijo una de las opciones`. Puedes probarlo ahora si no lo has hecho todavía.

                    Lamentablemente eso no va a funcionar! Como resultado de ese ejemplo, obtendrás: `yo elijo una de las [1, 2, 3, 4, 5, regenworm]. Pero ahora puedes resolver este problema en el nivel 3.

                start_code: "{print} Qué salió esta vez?"
            15:
                story_text: "## Dice\nIn this game you have to throw 6 in as little tries as possible.\n"
                example_code: "```\noptions = 1, 2, 3, 4, 5, 6\n{print} 'Throw 6 as fast as you can!'\nthrown = 0\ntries = 0\n{while} thrown != 6\n    thrown = options {at} {random}\n    {print} 'You threw ' thrown\n    tries = tries + 1\n{print} 'Yes! You have thrown 6 in ' tries ' tries.'\n```\n"
                start_code: '# place your code here'
            10:
                story_text: "## Dice\nIs everybody taking too long throwing the dice? In this level you can let Hedy throw all the dice at once!\n"
                example_code: "```\nplayers = Ann, John, Jesse\nchoices = 1, 2, 3, 4, 5, 6\n{for} player {in} players\n    {print} player ' throws ' choices {at} {random}\n    {sleep}\n```\n"
                start_code: '# place your code here'
    rock:
        name: "Piedra, papel o tijera"
        description: "Crea tu propio juego de piedra, papel y tijera"
        default_save_name: "Piedra"
        levels:
            1:
                story_text: |
                    ## Piedra, papel o tijera
                    En el nivel 1 comenzamos el juego de piedra, papel o tijera.

                    Con `{ask}` puedes tomar una opción, y con `{echo}` puedes repetir la opción elegida.
                example_code: |
                    ```
                    {print} Qué eliges?
                    {ask} elige piedra, papel o tijera
                    {echo} has elegido:
                    ```

                    ## Avance
                    Sólamente repetir la opción elegida es bastante aburrido, pero en los próximos niveles podremos hacer mucho más.

                start_code: "{print} Bienvenide a tu propio piedra, papel o tijera!"
            5:
                story_text: |
                    ## Piedra, papel o tijera
                    En el nivel 4 podemos determinar quien ha ganado el juego.
                    Para eso necesitamos un nuevo comando: `{if}`.

                    Graba tu opción con el nombre opción y la opción de la computadora como opcióncomputadora.
                    Luego puedes usar `{if}` para comprobar si ambas opciones fueron iguales o si fueron distintas.
                    Puedes escribir el código?
                example_code: |
                    ```
                    opciones {is} piedra, papel, tijera
                    opcióncomputadora {is} _
                    opción {is} {ask} 'Que eliges?'
                    {print} 'Has elegido ' _
                    {print} 'La computadora ha elegido ' _
                    {if} _ {is} _ {print} 'empate!' {else} {print} 'no hay empate'
                    ```

                    Reemplaza los guiones bajos con el código correcto para comprobar si alguien ganó el juego o si el juego resultó empatado.

                start_code: "{print} 'Bienvenide a tu propio piedra, papel o tijera!'"
            4:
                story_text: |
                    ## Piedra, papel o tijera
                    En el nivel 3 podemos seguir desarrollando nuestro juego de piedra, papel o tijera. Pero ahora, si quieres imprimir texto, debes usar comillas.
                    Eres capaz de imprimir un texto adicional? Reemplaza el guión bajo con el código correcto.
                example_code: |
                    ```
                    opciones {is} piedra, papel, tijera
                    {print} _ La computadora ha elegido: _ _ {at} _
                    ```
                start_code: "{print} 'Bienvenide a tu propio piedra, papel o tijera!'"
            3:
                story_text: |
                    ## Piedra, papel o tijera

                    En el nivel 2 puedes ingresar listas de elementos y luego escoger uno de ellos.

                    Primero debes ingresar una lista con el comando `{is}`. Luego puedes hacer que la computadora escoja un elemento de la lista con el comando `{at} {random}`.

                    De esa manera, la computadora puede elegir una opción: piedra, papel o tijera.
                example_code: |
                    ```
                    opciones {is} piedra, papel, tijera
                    {print} opciones {at} {random}
                    ```

                    En el nivel 2 también puedes usar `{ask}` nuevamente, entonces puedes intentar imprimir tanto tu elección como la elección de la computadora!
                    Ten cuidado, ahora `{ask}` funciona de manera distinta que en el nivel 1. Y también requiere que pongas un nombre delante de él.


                start_code: "{print} Bienvenide a tu propio piedra papel o tijera!"
            10:
                story_text: "## Rock, Paper, Scissors\nFeeling too lazy to play the game yourself? Let Hedy play it for you!\n"
                example_code: "```\nchoices = rock, paper, scissors\nplayers = Marleen, Michael\n{for} player {in} players\n     {print} player ' chooses ' choices {at} {random}\n```\n"
                start_code: '# place your code here'
            2:
                story_text: "## Rock, paper, scissors\nIn this level you can practise using the variables, so that you can make the rock, paper, scissors game in the next level!\n"
                example_code: "```\nchoice {is} _\n{print} I choose choice\n```\n"
                start_code: '# place your code here'
            15:
                story_text: "## Rock, Paper, Scissors\nPlay until you beat the computer! But first, finish the example code...\n"
                example_code: "```\nwon = 'no'\noptions = 'rock', 'paper', 'scissors'\n{while} won == 'no'\n    your_choice = {ask} 'What do you choose?'\n    computer_choice = options {at} {random}\n    {print} 'you chose ' your_choice\n    {print} 'the computer chose ' computer_choice\n    {if} computer_choice == your_choice\n        {print} 'Tie!'\n    {if} computer_choice == 'rock' {and} your_choice == 'scissors'\n        {print} 'You lose!'\n    {if} computer_choice == 'rock' {and} your_choice == 'paper'\n        {print} 'You win!'\n        won = 'yes'\n"
                start_code: '# place your code here'
            9:
                story_text: "## Rock, paper, scissors\nIn this level you can program the whole rock, paper, scissors game by nesting the {if}-commands. Can you finish the code?\n"
                example_code: "```\nchoices {is} rock, paper, scisscors\nyour_choice {is} {ask} 'What do you choose?'\n{print} 'You choose ' your_choice\ncomputer_choice {is} choices {at} {random}\n{print} 'The computer chooses ' computer_choice\n{if} computer_choice {is} your_choice\n    {print} 'Tie'\n{if} computer_choice {is} 'rock'\n    {if} your_choice {is} 'paper'\n        {print} 'You win!'\n    {if} your_choice {is} 'scissors'\n        {print} 'You lose!'\n```\n"
                start_code: '# place your code here'
            13:
                example_code: "```\noptions = 'rock', 'paper', 'scissors'\nyour_choice = {ask} 'What do you choose?'\ncomputer_choice = options {at} {random}\n{print} 'You choose ' your_choice\n{print} 'The computer chooses ' computer_choice\n{if} computer_choice {is} your_choice\n    {print} 'Tie'\n{if} computer_choice {is} 'rock' {and} your_choice {is} 'paper'\n    {print} 'You win!'\n{if} computer_choice {is} 'rock' {and} your_choice {is} 'scissors'\n    {print} 'The computer wins!'\n```\n"
                story_text: "## Rock, paper, scissors\nWith the `{and}` command you can shorten your rock, paper, scissors code! Check out the example code below and try to finish it.\n"
                start_code: '# place your code here'
    calculator:
        name: "Calculadora"
        description: "Haz una calculadora"
        default_save_name: "Calculadora"
        levels:
            9:
                story_text: |
                    ## Calculadora
                    En nivel 6 has aprendido a hacer una calculadora, en nivel 7 puedes expandir ese código y convertirlo en un pequeño juego de matemáticas. Así...
                example_code: |
                    ```
                    marcado {is} 0
                    {repeat} 10 {times}
                        números {is} 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        number1 {is} números {at} {random}
                        number2 {is} números {at} {random}
                        correctanswer {is} number1 * number2
                        {print} 'Qué {is} ' number1 ' por ' number2 '?'
                        respuesta {is} {ask} 'Escriba su respuesta aquí'
                        {print} 'Tu respuesta es' respuesta
                        {if} respuesta {is} correctanswer
                            marcado {is} marcado + 1
                    {print} '¡Gran trabajo! Tu puntuación es... ' marcado ' de 10!'
                    ```
                start_code: "{print} '¡Bienvenido a esta calculadora!'"
            6:
                story_text: |
                    ## Calculadora
                    Ahora que puedes calcular, puedes escribir un programa para practicar las tablas de multiplicar. Puedes decidir que cuentas incluir, por ejemplo:
                example_code: |
                    ```
                    respuestacorrecta {is} 11 * 27
                    respuesta {is} {ask} 'Cuánto es 11 veces 27?'
                    {if} respuesta {is} respuestacorrecta {print} 'Bien hecho'
                    {else} {print} 'Incorrecto! La respuesta correcta es ' respuestacorrecta
                    ```
                story_text_2: |
                    ## Multiplicaciones al azar
                    También puedes hacer que la computadora elija multiplicaciones al azar con `{random}`.

                    Entonces puedes listar algunas tablas para practicar, y elegir un número distinto para multipicarlas:
                example_code_2: |
                    ```
                    tablas {is} 4, 5, 6, 8
                    veces {is} 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    tabla {is} tablas {at} {random}
                    multiplicador {is} veces {at} {random}
                    respuestacorrecta {is} tabla * multiplicador
                    respuesta {is} {ask} 'Cuánto es ' tabla ' veces ' multiplicador '?'
                    {if} respuesta {is} respuestacorrecta {print} 'Bien hecho'
                    {else} {print} 'Incorrecto! La respuesta correcta es ' respuestacorrecta
                    ```
                start_code: "{print} 'Bienvenide a tu propia calculadora!'"
            14:
                story_text: "## Guess which number\nIn this level you can programm the game 'Guess which number'\n"
                example_code: "```\n{print} 'Guess which number'\nnumbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\nnumber = numbers {at} {random}\ngame = 'on'\n{for} i {in} {range} 1 {to} 10\n    {if} game == 'on'\n        guess = {ask} 'Which number do you think it is?'\n        {if} guess > number\n            {print} 'Lower!'\n        {if} guess < number\n            {print} 'Higher!'\n        {if} guess == number\n            {print} 'You win!'\n            game = 'over'\n"
                start_code: '# place your code here'
            12:
                story_text: "## Calculator\nNow you can make a calculator that works for decimal numbers.\n"
                example_code: "```\nnumber1 = {ask} 'What is the first number?'\nnumber2 = {ask} 'What is the second number?'\nanswer = number1 + number2\n{print} number1 ' plus ' number2 ' is ' answer\n"
                start_code: '# place your code here'
            10:
                story_text: "## Calculator\nThis calculator game helps you practise your tables of multiplication!\nIf you add more numbers to the list, you can practise all the multiplications.\n"
                example_code: "```\nnumbers = 1, 2, 3\n{for} number1 {in} numbers\n    {for} number2 {in} numbers\n        answer = {ask} 'How much is ' number2 ' times ' number1 '?'\n        correct = number1 * number2\n        {if} answer {is} correct\n            {print} 'Great job!'\n        {else}\n            {print} 'Thats wrong. The right answer is ' correct\n```\n"
                start_code: '# place your code here'
            15:
                story_text: "## Calculator\nYou can add the `{while}` loop to the calculator game you've learned to make in a previous level.\nThis makes sure the player can't continue to the next question {if} they answer incorrectly.\n"
                example_code: "```\nscore = 0\n{for} i {in} {range} 0 {to} 9\n    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    number1 = numbers {at} {random}\n    number2 = numbers {at} {random}\n    correct = number1 * number2\n    answer = 0\n    {while} answer != correct\n        {print} 'How much is ' number1 ' times ' number2 '?'\n        answer = {ask} 'Fill in your answer:'\n        {print} 'Your answer is ' answer\n    {print} 'Good job!'\n{print} 'You win!'\n```\n"
                start_code: '# place your code here'
    restaurant:
        name: "Restaurante"
        description: "Crea tu propio restaurante virtual"
        default_save_name: "Restaurante"
        levels:
            1:
                story_text: |
                    ## Restaurante
                     En nivel 1 puedes hacer tu propio restaurante virtual y tomar los pedidos de tus invitados.
                example_code: |
                    ```
                    {print} Bienvenido al restaurante Hedy's
                    {ask} ¿Qué te gustaría pedir?
                    {echo} Así que te gustaría ordenar
                    {print} ¡Gracias por su pedido!
                    {print} ¡Está en camino!
                    ```

                    ## Reto
                    ¿Se te ocurre más líneas para añadir al código de tu restaurante? Por ejemplo, ¿puedis {ask} a los invitados qué les gustaría beber?, decirles el precio, o desearles una comida agradable?
                start_code: "# place your code here"
                story_text_2: "## Challenge\nCan you think of more lines to add to your restaurant code? For example, can you {ask} the guests what they'd like to drink, tell them the price, or wish them a pleasant meal?\n"
            2:
                story_text: |
                    ## Restaurante
                    En nivel 2 puede expandir su restaurante mediante variables. En nivel 1 Hedy solo podía hacer eco de la orden una vez y solo recordar lo último que se ordenó.
                    ¡Ahora puedes usar variables y Hedy puede recordar tanto la comida como las bebidas!

                    ## Ejemplo Hedy Restaurant
                    ```
                    {print} ¡Bienvenido al restaurante Hedy's!
                    {print} Hoy estamos sirviendo pizza o lasaña.
                    food {is} {ask} ¿Qué te gustaría comer?
                    {print} ¡Muy buena elección! ¡La comida es mi favorita!
                    topping {is} {ask} ¿Te gustaría carne o verduras en eso?
                    {print} ¡La comida con cobertura está en camino!
                    drinks {is} {ask} ¿Qué te gustaría beber con eso?
                    {print} Gracias por su pedido
                    {print} ¡Tu comida y bebida estarán allí mismo!
                    ```

                start_code: "# place your code here"
                example_code: "```\n{print} Welcome to Hedy's restaurant!\n{print} Today we're serving pizza or lasagna.\nfood {is} {ask} What would you like to eat?\n{print} Great choice! The food is my favorite!\ntopping {is} {ask} Would you like meat or veggies on that?\n{print} food with topping is on its way!\ndrinks {is} {ask} What would you like to drink with that?\n{print} Thank you for your order.\n{print} Your food and drinks will be right there!\n```\n"
            11:
                story_text: |
                    ## Restaurante
                    Podemos usar `{for} i {in} {range} 1 {to} 5` para imprimir los pedidos de varios clientes de manera ordenada. 

                    ## Example Hedy código
                    ```
                    {print} '¡Bienvenido al restaurante Hedys!'
                    people {is} {ask} '¿Para cuántas personas te gustaría pedir?'
                    {for} i {in} {range} 1 {to} people
                        {print} 'El número de pedido ' i
                        food {is} {ask} '¿Qué te gustaría comer?'
                        {print} food
                        {if} food {is} fries
                            sauce {is} {ask} '¿Qué tipo de salsa te gustaría con eso?'
                            {print} sauce
                        drinks {is} {ask} '¿Qué quieres tomar?'
                        {print} drinks
                    price {is} 4 * people
                    {print} 'Eso será ' price ' dólar/dólares, ¡por favor!'
                    ```
                start_code: "# place your code here"
                example_code: "```\n{print} 'Welcome to Restaurant Hedy!'\npeople = {ask} 'For how many people would you like to order?'\n{for} i {in} {range} 1 {to} people\n    {print} 'Order number ' i\n    food = {ask} 'What would you like to eat?'\n    {print} food\n    {if} food {is} fries\n        sauce = {ask} 'What kind of sauce would you like with that?'\n        {print} sauce\n    drinks = {ask} 'What would you like to drink?'\n    {print} drinks\nprice = 4 * people\n{print} 'That will be ' price ' dollars, please!'\n```\n"
            10:
                story_text: |
                    ## Restaurante
                    En nivel 7 puede hacer que su restaurante virtual sea más elaborado repitiendo varias líneas de código. Así:

                    ```
                    {print} '¡Bienvenido al restaurante Hedys!'
                    people {is} {ask} '¿Cuántas personas se unirán a nosotros hoy?'
                    {print} '¡Excelente!'
                    {print} 'El menú de hoy tiene pizza o ensalada'
                    price {is} 0
                    {repeat} people {times}
                        food {is} {ask} '¿Qué quieres pedir?'
                        {print} food
                        {if} food {is} pizza
                            price {is} price + 10
                        {else}
                            price {is} price + 8
                    {print} '¡Gracias por pedir!'
                    {print} 'Eso será ' price 'dólar/dólares'
                    {print} '¡Buen provecho!'
                    ```

                    ## Reto
                    Por supuesto, Este código se puede ampliar con más elementos en el menú, oferta de bebidas, y/o múltiples cursos, ¡así que siéntase libre de agregar tantas opciones como desee!
                start_code: "courses = appetizer, main course, dessert"
                story_text_2: "Of course, you could also order for multiple people!\n"
                example_code: "```\ncourses = appetizer, main course, dessert\n{for} course {in} courses\n    food = {ask} 'What would you like to eat as your ' course '?'\n    {print} food ' will be your ' course\n```\n"
                example_code_2: "```\ncourses = appetizer, main course, dessert\nnames = Timon, Onno\n{for} name {in} names\n    {for} course {in} courses\n        food = {ask} name ', what would you like to eat as your ' course '?'\n        {print} name ' orders ' food ' as their ' course\n```\n"
            7:
                story_text: |
                    ## Restaurante
                    En nivel 5 ha aprendido a utilizar el comando Repeat para repetir una línea de código una cierta cantidad de veces.
                    Puedes usar eso en tu restaurante para preguntar a varias personas qué les gustaría comer. Así:

                    ```
                    {print} '¡Bienvenido al restaurante Hedys!'
                    people {is} {ask} '¿Cuántas personas se unen a nosotros hoy?'
                    {repeat} people {times} food {is} {ask} '¿Qué te gustaría comer?'
                    {print} '¡Gracias por su orden! ¡Se acerca!'
                    ```
                    En nivel 5 puedes preguntar a varias personas qué les gustaría comer, pero no puede imprimir cada pedido individualmente, porque sólo puede repetir una línea de código.
                    En nivel 7 aprenderá a repetir varias líneas de código a la vez, ¡lo que le permite pedir múltiples pedidos e imprimirlos también!

                start_code: "# place your code here"
                example_code: "```\n{print} 'Welcome to Hedys restaurant!'\npeople = {ask} 'How many people are joining us today?'\n{repeat} people times food = {ask} 'What would you like to eat?'\n{print} 'Thanks for your order! Its coming right up!'\n```\n"
            6:
                story_text: |
                    ## Restaurante
                    En nivel 5 puede utilizar maths para calcular el precio total del pedido de su cliente, lo que puede hacer que su restaurante virtual sea más realista.

                    ## Example Hedy código (Simple)
                    Puedes hacer un código de restaurante simple, como este:
                    ```
                    {print} 'Bienvenido al restaurante Hedys'
                    {print} 'Aquí está nuestro menú:'
                    {print} 'Nuestros platos principales son pizza, lasaña o espaguetis'
                    main {is} {ask} '¿Qué plato principal te gustaría?'
                    price {is} 0
                    {if} main {is} pizza price {is} 10
                    {if} main {is} lasaña price {is} 12
                    {if} main {is} espaguetis price {is} 8
                    {print} 'Has ordenado ' main
                    {print} 'Eso será ' price ' dólares, por favor'
                    {print} '¡Gracias, disfruta de tu comida!'
                    ```
                    Pero también puedes añadir muchas más cosas a tu restaurante virtual, por ejemplo más cursos.

                    ## Example Hedy código (complicado)
                    En este ejemplo hay tres cursos, lo que requiere más código y más adiciones en el cálculo del precio.
                    ```
                    {print} 'Bienvenido al restaurante Hedys'
                    {print} 'Aquí está nuestro menú:'
                    {print} 'Nuestros entrantes son ensalada, sopa o carpaccio'
                    {print} 'Nuestros platos principales son pizza, lasaña o espaguetis'
                    {print} 'Nuestros postres son brownie, helado o batido'
                    starter {is} {ask} '¿Qué entrante te gustaría tener?'
                    main {is} {ask} '¿Qué plato principal te gustaría?'
                    dessert {is} {ask} '¿Qué postre eliges?'
                    price {is} 0
                    {if} starter {is} sopa price {is} price + 6 {else} price {is} price + 7
                    {if} main {is} pizza price {is} price + 10
                    {if} main {is} lasaña price {is} price + 12
                    {if} main {is} espaguetis price {is} price + 8
                    {if} dessert {is} brownie price {is} price + 7
                    {if} dessert {is} helado price {is} price + 5
                    {if} dessert {is} batido price {is} price + 4
                    {print} 'Has ordenado ' starter ' , ' main ' y ' dessert
                    {print} 'Eso será ' price ' dólares, por favor'
                    {print} '¡Gracias, disfruta de tu comida!'
                    ```
                    ## Reto
                    uedes añadir muchas más cosas a tu restaurante virtual. Por ejemplo, ¿puedes......
                    - pregunte cuántas personas vienen y multiplique el precio por esa cantidad?
                    - añadir otro curso?
                    - dar a las personas un descuento cuando ingresan un código de cupón (secreto)?
                    - agregar un menú infantil?
                    - piensa en otras cosas divertidas para agregar?

                start_code: "# place your code here"
                story_text_2: "But you can also add many more things to your virtual restaurant, for example more courses.\n"
                example_code: "## Example Hedy code (Simple)\nYou can make a simple restaurant code, like this:\n```\n{print} 'Welcome to Hedys restaurant'\n{print} 'Here is our menu:'\n{print} 'Our main courses are pizza, lasagne, or spaghetti'\nmain = {ask} 'Which main course would you like?'\nprice = 0\n{if} main {is} pizza price = 10\n{if} main {is} lasagne price = 12\n{if} main {is} spaghetti price = 8\n{print} 'You have ordered ' main\n{print} 'That will be ' price ' dollars, please'\n{print} 'Thank you, enjoy your meal!'\n```\n"
                example_code_2: "## Example Hedy code(Elaborate)\nIn this example there are three courses, which requires more code and more additions in calculating the price.\n```\n{print} 'Welcome to Hedys restaurant'\n{print} 'Here is our menu:'\n{print} 'Our starters are salad, soup, or carpaccio'\n{print} 'Our main courses are pizza, lasagne, or spaghetti'\n{print} 'Our desserts are brownie, ice cream, or milkshake'\nstarter = {ask} 'Which starter would you like to have?'\nmain = {ask} 'Which main course would you like?'\ndessert = {ask} 'Which dessert do you pick?'\nprice = 0\n{if} starter {is} soup price = price + 6 {else} price = price + 7\n{if} main {is} pizza price = price + 10\n{if} main {is} lasagne price = price + 12\n{if} main {is} spaghetti price = price + 8\n{if} dessert {is} brownie price = price + 7\n{if} dessert {is} ice cream price = price + 5\n{if} dessert {is} milkshake price = price + 4\n{print} 'You have ordered ' starter ' , ' main ' and ' dessert\n{print} 'That will be ' price ' dollars, please'\n{print} 'Thank you, enjoy your meal!'\n```\n## Challenge\nYou can add many more things to your virtual restaurant. For example, can you...\n- {ask} how many people are coming and multiply the price by that amount?\n- add another course?\n- give people a discount when they enter a (secret) couponcode?\n- add a children's menu?\n- think of other fun things to add?\n"
            5:
                story_text: |
                    ## Restaurante
                    En nivel 4 el comando {if} le permite hacer preguntas a sus clientes y dar diferentes respuestas a las respuestas.
                    En el ejemplo siguiente, ves que puedis {ask} al cliente si quiere escuchar los especiales y Hedy puede responder en consecuencia.

                    ## Ejemplo Hedy código
                    ```
                    {print} '¡Bienvenido al restaurante Hedys!'
                    special {is} {ask} '¿Te gustaría escuchar nuestros especiales hoy?'
                    {if} special {is} yes {print} 'El especial de hoy es el pollo piri piri y el arroz.' {else} {print} 'No hay problema.'
                    food {is} {ask} '¿Qué te gustaría comer?'
                    {print} '¡Uno ' food ', ya mismo!'
                    drink {is} {ask} '¿Qué te gustaría beber con eso?'
                    {if} drink {is} cola {print} 'Lo siento, ¡nos quedamos sin cola!' {else} {print} '¡Muy buena elección!'
                    anything {is} {ask} '¿Te gustaría algo más?'
                    {print} 'Déjame repetir tu pedido...'
                    {print} 'Uno ' food
                    {if} drink {is} cola {print} 'y...' {else} {print} 'Uno ' drink
                    {if} anything {is} no {print} '¡Eso es todo!' {else} {print} 'Uno ' anything
                    {print} '¡Gracias por su pedido y disfrute de su comida!'
                    ```

                    ## Reto
                    ¿Puede pensar en más preguntas para hacer a los clientes cuando están ordenando, y hacer diferentes respuestas a sus respuestas usando el comando {if}?

                start_code: "# place your code here"
                example_code: "```\n{print} 'Welcome to Hedys restaurant!'\nspecial {is} {ask} 'Would you like to hear our specials today?'\n{if} special {is} yes {print} 'Todays special is chicken piri piri and rice.' {else} {print} 'No problem.'\nfood {is} {ask} 'What would you like to eat?'\n{print} 'One ' food ', coming right up!'\ndrink {is} {ask} 'What would you like to drink with that?'\n{if} drink {is} cola {print} 'Im sorry, we are out of cola!' {else} {print} 'Great choice!'\nanything {is} {ask} 'Would you like anything {else}?'\n{print} 'Let me repeat your order...'\n{print} 'One ' food\n{if} drink {is} cola {print} 'and...' {else} {print} 'One ' drink\n{if} anything {is} no {print} 'Thats it!' {else} {print} 'One ' anything\n{print} 'Thank you for your order and enjoy your meal!'\n```\n\n## Challenge\nCan you think of more questions to {ask} the customers when they are ordering, and make up different responses to their answers by using the {if} command?\n"
                story_text_2: "## Challenge\nCan you think of more questions to {ask} the customers when they are ordering, and make up different responses to their answers by using the {if} command?\n"
            4:
                story_text: |
                    ## Restaurante
                    En nivel 3 tienes que usar comillas cuando usas el comando `{print}`.
                    ¿Puede hacer que su código de nivel 2 funcione en el nivel 3 agregando las comillas?

                    ¡Cuidado! En nivel 2 los apóstrofos estaban permitidos en el texto, pero en el nivel 3 Hedy los confundirá con comillas y el código no funcionará!
                    Así que en lugar de escribir  `{print} Hoy estamos sirviendo pizza` , debe escribir `{print} 'Hoy estamos sirviendo pizza'`

                    ## Ejemplo Hedy restaurante
                    ```
                    {print} '¡Bienvenido al restaurante Hedys!'
                    {print} 'Hoy estamos sirviendo pizza o lasaña.'
                    food {is} {ask} '¿Qué te gustaría comer?'
                    {print} '¡Muy buena elección! ¡' food ' es mi favorito!'
                    topping {is} {ask} '¿Te gustaría carne o verduras en eso?'
                    {print} '¡' food ' con ' topping ' está en camino!'
                    drinks {is} {ask} '¿Qué te gustaría beber con eso?'
                    {print} 'Gracias por su pedido.'
                    {print} 'Su ' food ' y ' drinks ' ¡estará ahí mismo!'
                    ```
                start_code: "# place your code here"
                example_code: "## Example Hedy Restaurant\n```\n{print} 'Welcome to Hedys restaurant!'\n{print} 'Today we are serving pizza or lasagna.'\nfood {is} {ask} 'What would you like to eat?'\n{print} 'Great choice! The ' food ' is my favorite!'\ntopping {is} {ask} 'Would you like meat or veggies on that?'\n{print} food ' with ' topping ' is on its way!'\ndrinks {is} {ask} 'What would you like to drink with that?'\n{print} 'Thank you for your order.'\n{print} 'Your ' food ' and ' drinks ' will be right there!'\n```\n"
            3:
                story_text: |
                    ## Restaurante al azar
                    ¿Tienes problemas para decidir qué quieres cenar? ¡Puedes dejar que Hedy elija por ti!
                    Simplemente agregue listas de sus favoritos (o menos favorito) comidas y Hedy puede elegir al azar su cena.
                    También puedes divertirte un poco, ¡dejando que Hedy elija el precio de su cena también! ¿Qué vas a conseguir?

                    ## Ejemplo Hedy código restaurante al azar

                    ```
                    {print} ¡Bienvenido a Hedy's Random Restaurant!
                    {print} ¡El único restaurante que elegirá al azar su comida y su precio para usted!
                    starters {is} ensalada, sopa, carpaccio
                    mains {is} pizza, coles de Bruselas, espaguetis
                    desserts {is} brownies, helados, quesos franceses
                    drinks {is} cola, cerveza, agua
                    prices {is} 1 dólar, 10 dólares, 100 dólares
                    {print} Comenzarás con: entrantes al azar
                    {print} Luego serviremos: principal en al azar
                    {print} Y como postre: postres al azar
                    {print} Obtendrás una bebida al azar para beber
                    {print} Eso será: precios al azar
                    {print} ¡Gracias y disfruta de tu comida!
                    ```

                    ## Reto
                    ¿Puedes pensar en alguna adición divertida en el código de tu restaurante?
                start_code: "# place your code here"
                example_code: "```\n{print} Welcome to Hedy's Random Restaurant!\n{print} The only restaurant that will randomly choose your meal and its price for you!\nstarters {is} salad, soup, carpaccio\nmains {is} pizza, brussels sprouts, spaghetti\ndesserts {is} brownies, ice cream, french cheeses\ndrinks {is} cola, beer, water\nprices {is} 1 dollar, 10 dollars, 100 dollars\n{print} You will start with: starters {at} {random}\n{print} Then we'll serve: mains {at} {random}\n{print} And as dessert: desserts {at} {random}\n{print} You will get a drinks {at} {random} to drink\n{print} That will be: prices {at} {random}\n{print} Thank you and enjoy your meal!\n```\n"
                story_text_2: "## Allergies\nDoes your costumer have any allergies or do they dislike certain dishes? Then you can use the `{remove}`command to remove it from your menu.\n"
                example_code_2: "```\n{print} Mystery milkshake\nflavors {is} strawberry, chocolate, vanilla\nallergies {is} {ask} Are you allergic to any falvors?\n{remove} allergies {from} flavors\n{print} You get a flavors {at} {random} milkshake\n```\n"
            8:
                story_text: "## Restaurant\nIn this level you can make your virtual restaurant more elaborate by repeating multiple lines of code. Like this:\n"
                example_code: "```\n{print} 'Welcome to Hedys restaurant!'\npeople = {ask} 'How many people will be joining us today?'\n{print} 'Great!'\n{repeat} people {times}\n    food = {ask} 'What would you like to order?'\n    {print} food\n{print} 'Thank you for ordering!'\n{print} 'Enjoy your meal!'\n```\n\n## Challenge\nOf course, this code can be expanded with more items on the menu, offering drinks, and/or multiple courses, so feel free to add as many options as you like!\n"
                start_code: '# place your code here'
                story_text_2: "## Challenge\nOf course, this code can be expanded with more items on the menu, offering drinks, and/or multiple courses, so feel free to add as many options as you like!\n"
            12:
                story_text: "## Restaurant\nFrom this level on you can use decimal numbers to make you menu more realistic.\n"
                example_code: "```\nprice = 0\nfood = {ask} 'What would you like to order?'\ndrinks = {ask} 'What would you like to drink?'\n{if} food {is} 'hamburger'\n    price = price + 6.50\n{if} food {is} 'pizza'\n    price = price + 5.75\n{if} drinks {is} 'water'\n    price = price + 1.20\n{if} drink {is} 'soda'\n    price = price + 2.35\n{print} 'That will be ' price ' dollar, please'\n```\n"
                start_code: '# place your code here'
            9:
                story_text: "## Restaurant\nIn this level you can use nesting to make your restaurant more realistic and more fun!\nFor example you would {ask} for sauce {if} somebody orders fries, but you wouldn't {if} someone orders pizza!\nCheck out the example, and try this at your own virtual restaurant!\n"
                example_code: "```\n{print} 'Welcome to Hedys restaurant!'\npeople = {ask} 'How many people will be joining us today?'\n{print} 'Great!'\nprice = 0\n{repeat} people {times}\n    food = {ask} 'What would you like to order?'\n    {print} food\n    {if} food {is} fries\n        price = price + 3\n        sauce = {ask} 'What kind of sauce would you like with your fries?'\n        {if} sauce {is} no\n            {print} 'no sauce'\n        {else}\n            price = price + 1\n            {print} 'with ' sauce\n    {if} food {is} pizza\n        price = price + 4\n{print} 'That will be ' price ' dollar'\n{print} 'Enjoy your meal!'\n```\n"
                start_code: '# place your code here'
            15:
                example_code: "```\n{print} 'Welcome at McHedy'\nmore = 'yes'\n{while} more == 'yes'\n    order = {ask} 'What would you like to order?'\n    {print} order\n    more = {ask} 'Would you like to order anything {else}?'\n{print} 'Thank you!'\n"
                story_text: "## Restaurant\nWith the `{while}` you can make sure your costumers can keep adding orders until they are done.\n"
                start_code: '# place your code here'
            13:
                story_text: "## Restaurant\nIn this level we can use the new commands to upgrade our restaurant.\nWe use `{and}` to see {if} two things are both the case.\n"
                example_code: "```\nprice = 10\nfood = {ask} 'What would you like to eat?'\ndrinks = {ask} 'What would you like to drink?'\n{if} food {is} 'sandwich' {and} drinks {is} 'juice'\n    {print} 'Thats our discount menu'\n    price = price - 3\n{print} 'That will be ' price ' dollars'\n```\n"
                example_code_2: "```\ndrinks = {ask} 'What would you like to drink?'\n{if} drinks {is} 'water' {or} drinks {is} 'juice'\n    {print} 'Thats a healthy choice'\n```\n"
                story_text_2: "We use `{or}` to see {if} one our of two things is the case.\n"
                start_code: '# place your code here'
    fortune:
        name: "El adivino"
        description: "Deja que Hedy prediga el futuro"
        default_save_name: "El adivino"
        levels:
            1:
                story_text: |
                    ## El adivino
                    ¿Alguna vez has estado en un carnaval y tu futuro ha sido predicho por un adivino? ¿O alguna vez has jugado con una bola mágica de ocho?
                    Entonces probablemente sepas que realmente no pueden predecir tu futuro, ¡pero sigue siendo divertido jugar!

                    ¡En los próximos niveles puedes aprender a crear tu propia máquina de adivinación!
                    En nivel 1 puedes comenzar fácil dejando que Hedy se presente como adivina y dejes que se haga eco de las respuestas de los jugadores.
                    Así:

                    ## Example Hedy código
                    ```
                    {print} Hola, soy Hedy la adivina!
                    {ask} ¿Quién eres?
                    {print} Déjame echar un vistazo a mi bola de cristal
                    {print} Veo... Veo...
                    {echo} Te llamas 
                    ```

                    ## Reto
                    Hedy ahora solo te dice tu nombre. ¿Puedes expandir el código para que Hedy pueda predecir más cosas sobre ti?

                    Obviamente, Hedy aún no es una muy buena adivina, ¡ya que solo puede repetir las respuestas que dieron los jugadores!
                    Echa un vistazo en el nivel 2 para mejorar tu adivino.

                start_code: "# place your code here"
                example_code: "```\n{print} Hello, I'm Hedy the fortune teller!\n{ask} Who are you?\n{print} Let me take a look in my crystal ball\n{print} I see... I see...\n{echo} Your name is\n```\n\n## Challenge\nHedy now only tells you your name. Can you expand the code so that Hedy can predict more things about you?\n\nObviously, Hedy isn't a very good fortune teller yet, as she can only repeat the answers that were given by the players!\nTake a look in level 2 to improve your fortune teller.\n"
                story_text_2: "## Challenge\nHedy now only tells you your name. Can you expand the code so that Hedy can predict more things about you?\nObviously, Hedy isn't a very good fortune teller yet, as she can only repeat the answers that were given by the players!\nTake a look in level 2 to improve your fortune teller.\n"
            3:
                story_text: |
                    ## El adivino
                    En nivel 1 has creado tu primera máquina de adivinación, pero Hedy realmente no podía predecir nada, sólo eco.
                    En nivel 2 puede utilizar una variable y `{at} {random}` ordene realmente dejar que Hedy elija una respuesta para usted. Echa un vistazo a este código, por ejemplo:

                    ## Example Hedy código
                    En este ejemplo, el jugador puede hacerle a Hedy una pregunta de sí-no y Hedy elegirá una respuesta aleatoria para usted.
                    ```
                    {print} ¡Soy Hedy la adivina!
                    question {is} {ask} ¿Qué quieres saber?
                    {print} Esto es lo que quieres saber: question
                    answers {is} yes, no, maybe
                    {print} Mi bola de cristal dice... answers {at} {random}
                    ```

                    ## Retos
                    Ahora, Hedy solo puede responder sí, no o tal vez. ¿Puedes darle a Hedy más opciones de respuesta, como 'definitivamente' o 'preguntar de nuevo'?
                start_code: "# place your code here"
                example_code: "In this example the player can {ask} Hedy a yes-no question and Hedy will pick a random answer for you.\n```\n{print} I’m Hedy the fortune teller!\nquestion {is} {ask} What do you want to know?\n{print} This is what you want to know: question\nanswers {is} yes, no, maybe\n{print} My crystal ball says...\n{sleep} 2\n{print} answers {at} {random}\n```\n\n## Challenges\nNow, Hedy can only answer yes, no or maybe. Can you give Hedy more answer options, like 'definitely' or '{ask} again'.\n"
                story_text_2: "## Challenges\nNow, Hedy can only answer yes, no or maybe. Can you give Hedy more answer options, like 'definitely' or '{ask} again'.\n"
            12:
                story_text: "## Fortune Teller\nIn this level you can make your fortunes multiple words. Like in this example below:\n"
                example_code: "```\nfortunes = 'you will be rich', 'you will fall in love', 'you will slip on a banana peel'\n{print} 'I will take a look in my crystall ball for your future.'\n{print} 'I see... I see...'\n{sleep}\n{print} fortunes {at} {random}\n```\n"
                start_code: '# place your code here'
            10:
                story_text: "## Fortune Teller\nIn this level you'll learn how to program the game MASH (mansion, apartement, shack, house). In this game you can predict for all the players at once, what their future will look like.\n"
                example_code: "```\nhouses = mansion, apartment, shack, house\nloves = nobody, a royal, their neighbour, their true love\npets = dog, cat, elephant\nnames = Jenna, Ryan, Jim\n{for} name {in} names\n    {print} name ' lives in a ' houses {at} {random}\n    {print} name ' will marry ' loves {at} {random}\n    {print} name ' will get a ' pets {at} {random} ' as their pet.'\n    {sleep}\n```\n"
                story_text_2: We can also make a Harry Potter themed fortune teller.
                example_code_2: "```\nhouses = Gryffindor, Slytherin, Hufflepuff, Ravenclaw\nsubjects = potions, defence against the dark arts, charms, transfiguration\nfears = Voldemort, spiders, failing your OWL test\nnames = Harry, Ron, Hermione\n{for} name in names\n    {print} name ' is placed in ' houses {at} {random}\n    {print} name ' is great at ' subjects {at} {random}\n    {print} name 's greatest fear is ' fears {at} {random}\n```\n"
                start_code: '# place your code here'
            6:
                story_text: "## Fortune Teller\nIn this level you can use math in your predictions as a fortune teller. This allows you to make up (silly) formulas to calculate the future.\nFor example you could calculate how rich you'll get or how many kids you will have when you grow up.\n"
                example_code: "```\n{print} 'I am Hedy the fortune teller!'\n{print} 'I can predict how many kids youll get when you grow up!'\nage = {ask} 'How old are you?'\nsiblings = {ask} 'How many siblings do you have?'\nlength = {ask} 'How tall are you in centimetres?'\nkids = length / age\nkids = kids - siblings\n{print} 'You will get ...'\n{sleep}\n{print} kids ' kids!'\n```\n\n## Example Silly Fortune Teller\nIf the previous example wasn't silly enough for you, take a look at this one!\n\n```\n{print} 'Im Hedy the silly fortune teller!'\n{print} 'I will predict how smart you are!'\nfootball = {ask} 'On a scale 1-10 how much do you love football?'\nbananas = {ask} 'How many bananas did you eat this week?'\nhygiene = {ask} 'How many times did you wash your hands today?'\nresult = bananas + hygiene\nresult = result * football\n{print} 'You are ' result ' percent smart.'\n```\n"
                start_code: '# place your code here'
            5:
                story_text: "## Fortune Teller\nIn this level you'll learn to (secretly) tip the odds in your favor, when using the fortune teller!\nBy using `{if}` and `{else}` you can make sure that you will always get a good fotune, while other people might not.\nCheck out this example to find out how.\n"
                example_code: "```\n{print} 'Im Hedy the fortune teller!'\n{print} 'I can predict {if} youll win the lottery tomorrow!'\nperson {is} {ask} 'Who are you?'\n{if} person {is} Hedy {print} 'You will definitely win!\U0001F929' {else} {print} 'Bad luck! Someone {else} will win!\U0001F62D'\n```\n"
                story_text_2: "Replace Hedy with your own name in the last line, and Hedy will always predict that you will win the lottery and others won't!\nOf course this might raise some suspicion with the other players... To avoid that, you can make sure that Hedy does give different answers every time you run the code.\nBut of course, still gives you a positive answer and the other players a negative one.\n"
                example_code_2: "```\n{print} 'Im Hedy the fortune teller!'\n{print} 'I can predict {if} you will win the lottery tomorrow!'\nperson {is} {ask} 'Who are you?'\ngoodanswer {is} Hurray! You win!, You will definitely win!, We have a winner!\nbadanswer {is} Bad luck! Try again!, Another person will win, You lose!\n{if} person {is} Hedy {print} goodanswer {at} {random} {else} {print} badanswer {at} {random}\n```\n\n## Challenges\nThis concept can be used to make may different programs, just be creative! For example you could create a machine that predicts that your favorite sports team will beat all the competitors!\nOr you could make  Snow White's magic mirror on the wall, to tell everyone you are the fairest of them all!\nLet your imagination do the work!\n"
                start_code: '# place your code here'
                story_text_3: "## Challenges\nThis concept can be used to make may different programs, just be creative! For example you could create a machine that predicts that your favorite sports team will beat all the competitors!\nOr you could make  Snow White's magic mirror on the wall, to tell everyone you are the fairest of them all!\nLet your imagination do the work!\n"
            4:
                example_code: "```\n{print} 'Im Hedy the fortune teller!'\nquestion {is} {ask} 'What do you want to know?'\n{print} 'This is your question: ' question\nanswers {is} yes, no, maybe\n{print} 'My crystal ball says...'\n{sleep} 2\n{print} answers {at} {random}\n```\n"
                story_text: "## Fortune Teller\nThis level has no new functions, but allows you to practice with using the quotation marks.\nYou can remake your level 3 code, and make sure to add the quotation marks in the right places!\n\nMind that in level 3, we couldn't use the word 'question' as both the name of the variable and a normal word that could be printed.\nThe quotation marks in level 3 make this possible!\n\nImportant! Mind that now that we're using quotation marks, Hedy will get confused when you use the apostrophe for contractions like I'm or What's.\nMake sure to remove those apostrophes and change the spelling to Im or Whats.\n"
                start_code: '# place your code here'
            8:
                story_text: "## Fortune Teller\nIn the previous levels you've learned how to use repeat to make the fortune teller answer 3 questions in a row, but we had a problem with printing the questions.\nNow that problem is solved, because of the new way of using the repeat command.\nIn the next example you can have your fortune teller {ask} 3 questions and also print them!\n"
                example_code: "```\n{print} 'I am Hedy the fortune teller!'\n{print} 'You can {ask} me 3 questions.'\nanswers = yes, no, maybe\n{repeat} 3 {times}\n   question = {ask} 'What do you want to know?'\n   {print} question\n   {sleep}\n   {print} 'My crystal ball says...' answers {at} {random}\n```\n"
                start_code: '# place your code here'
            7:
                story_text: "## Fortune Teller\nIn this level you can use the `{repeat}` command to make your machine tell multiple fortunes at once.\n"
                example_code: "```\n{print} 'Im Hedy the fortune teller!'\n{print} 'You can {ask} 3 questions!'\n{repeat} 3 {times} question = {ask} 'What do you want to know?'\nanswer = yes, no, maybe\n{repeat} 3 {times} {print} 'My crystal ball says... ' answer {at} {random}\n```\n\n## Challenge\nAs you can see, the questions aren't printed in this example. That's because the variable `question` was changed 3 times.\nEvery time the player fills in the new answer, Hedy overwrites the previous one, so the first answer the player gave is forgotten.\nThis means you can't print all the questions this way.\n\nBy using 3 different variables instead of 1 (for example `question1` , `question2` and `question3`), you could solve the problem and print the questions.\nThis does mean that you can only use `{repeat}` for the answers, and you will have to ask and print all the questions separately.\nCan you do it?\n\nIn the upcoming levels the layout of {repeat} command will change, which enables you to repeat multiple lines at once.\n"
                start_code: '# place your code here'
                story_text_2: "## Challenge\nAs you can see, the questions aren't printed in this example. That's because the variable `question` was changed 3 times.\nEvery time the player fills in the new answer, Hedy overwrites the previous one, so the first answer the player gave is forgotten.\nThis means you can't print all the questions this way.\n\nBy using 3 different variables instead of 1 (for example `question_1` , `question_2` and `question_3`), you could solve the problem and print the questions.\nThis does mean that you can only use `{repeat}` for the answers, and you will have to ask and print all the questions separately.\nCan you do it?\n\nIn the upcoming levels the layout of {repeat} command will change, which enables you to repeat multiple lines at once.\n"
    parrot:
        name: Parrot
        levels:
            2:
                story_text: "## Parrot\nCreate your own online pet parrot that will copy you!\n"
                example_code: "```\n{print} Im Hedy the parrot\nname {is} {ask} whats your name?\n{print} name\n{sleep}\n{print} squawk\n{sleep}\n{print} name\n```\n"
                start_code: '{print} Im Hedy the parrot!'
            1:
                story_text: "## Parrot\nCreate your own online pet parrot that will copy you!\n"
                example_code: "```\n{print} Im Hedy the parrot\n{ask} whats your name?\n{echo}\n{echo}\n```\n"
                start_code: '{print} Im Hedy the parrot'
            5:
                example_code: "```\nwords {is} squawk, Hedy\n{print} 'Train your parrot!'\nnew_word {is} {ask} 'Which word do you want to teach them?'\n{add} new_word {to_list} words\nsaid_word {is} words {at} {random}\n{print} '\U0001F9D2 Say ' new_word ', Hedy!'\n{print} '\U0001F99C ' said_word\n{if} said_word {is} new_word {print} '\U0001F9D2 Great job, Hedy! \U0001F36A'\n{else} {print} '\U0001F9D2 No, Hedy! Say ' new_word\n```\n"
                story_text: "## Parrot\nReward your parrot {if} it says the correct word!\n"
                start_code: '# place your code here'
            3:
                story_text: "## Parrot\nTeach your parrot a new word with `{add}`.\n"
                example_code: "```\nwords {is} squawk, Hedy\n{print} Train your parrot!\nnew_word {is} {ask} Which word do you want to teach them?\n{add} new_word {to_list} words\n{print} \U0001F9D2 Say new_word , Hedy!\n{print} \U0001F99C words {at} {random}\n```\n"
                start_code: '# place your code here'
        description: Create your own online pet parrot that will copy you!
        default_save_name: Parrot
    next:
        name: What's next?
        description: What's Next?
        default_save_name: next
        levels:
            2:
                story_text: "## What's next?\nIn this level you've learned what a variable is and how you can use it to make your adventures more interactive.\nBut... that's not the only thing you can do with variables! You can also use variables to make lists.\nAnd you can even let Hedy pick a random word out of a list, which allows you to make real games!\nTake a quick look at the next level!\n"
                start_code: "{print} Let's go to the next level!"
            13:
                start_code: "{print} 'Lets go to the next level!'"
                story_text: "## What's next?\nWith the program below you can calulate {if} you've passed a subject at school (so, a grade of six or higher).\nYou can see this code is extremely inefficient, du to the very long code in line 5.\nAll the different grades from 1 to 5 had to be programmed seperately. Lucky for you, in the next level you'll learn how to do this without this extremely long code!\n```\nfirst_grade = {ask} 'What score did you get on your first test?'\nsecond_grade = {ask} 'What score did you get on your second test?'\nadded {is} first_grade + second_grade\nmean_grade {is} added / 2\n{if} mean_grade = 1 {or} mean_grade = 2 {or} mean_grade = 3 {or} mean_grade = 4 {or} mean_grade = 5\n    {print} 'Oh no! You have failed the subject...'\n{else}\n    {print} 'Great! You have passed the subject!'\n```\n"
                example_code: "```\nfirst_grade = {ask} 'What score did you get on your first test?'\nsecond_grade = {ask} 'What score did you get on your second test?'\nadded {is} first_grade + second_grade\nmean_grade {is} added / 2\n{if} mean_grade = 1 {or} mean_grade = 2 {or} mean_grade = 3 {or} mean_grade = 4 {or} mean_grade = 5\n    {print} 'Oh no! You have failed the subject...'\n{else}\n    {print} 'Great! You have passed the subject!'\n```\n"
            4:
                start_code: "{print} 'Lets go to the next level!'"
                story_text: "## What's next?\nIn the previous levels you've already learned to use `{at} {random}` which made your games different every time you ran the code.\nBut it's not really interactive, the player doesn't have any influence on what happens in the game.\n\nIn the next level you'll learn the `{if}` command, that allows you to give different responses in your program. This way you can program a secret password for your computer for example.\nSo let's take a peak!\n\n```\npassword {is} {ask} 'What is the correct password?'\n```\n"
            9:
                start_code: "{print} 'Lets go to the next level!'"
                story_text: "## What's next?\nYou're doing great! In this level we still face a small problem. You have learned to repeat lines, but what {if} you'd want to slightly change the line.\nFor example {if} you want to sing the song '{if} you're happy and you knwo it'\n\nIt would look like this:\n```\n{repeat} 2 {times}\n    {print} '{if} youre happy and you know it clap your hands'\n{print} '{if} youre happy and you know it and you really want to show it'\n{print} '{if} youre happy and you know it clap your hands'\n```\n\nIf you'd also want the next verse 'stomp your feet', and the next one, and the next one, you'd have to change the code completely.\nIn the next level you'll learn the `{for}` command, which allows you to make a list of actions and repeat the code with another action each time!\nPlease take a look!\n"
                example_code: "```\n{repeat} 2 {times}\n    {print} '{if} youre happy and you know it clap your hands'\n{print} '{if} youre happy and you know it and you really want to show it'\n{print} '{if} youre happy and you know it clap your hands'\n```\n"
            14:
                story_text: "## What's next?\nIn this game below a code has been made to make sure the player can play on as long as he/she wants...\nBut the code is ineffective and way too long. Also, what {if} the player wants to play 101 games instead of 100?\nYou can't play to infinity?\nIn the next level you will learn a command that makes all of this a lot easier!\n```\ngame {is} 'on'\n{for} i {in} {range} 1 {to} 100\n    {if} game {is} 'on'\n        answer = {ask} 'Do you want to continue?'\n        {if} answer {is} 'no'\n            game {is} 'over'\n        {if} answer {is} 'yes'\n            {print} 'Ok we will continue'\n```\n"
                start_code: "{print} 'Lets go to the next level!'"
                example_code: "```\ngame {is} 'on'\n{for} i {in} {range} 1 {to} 100\n    {if} game {is} 'on'\n        answer = {ask} 'Do you want to continue?'\n        {if} answer {is} 'no'\n            game {is} 'over'\n        {if} answer {is} 'yes'\n            {print} 'Ok we will continue'\n```\n"
            1:
                story_text: "## What's next?\nCongratulations! You've reached the end of level 1. Hopefully you've already made some awesome codes, but Hedy has a lot more to discover. \n\nIn the first level you might've notice that the `{echo}` command can only save one bit of information at a time. \nFor example in the restaurant adventure, you could {echo} what the costumer wanted to eat, or what they wanted to drink, but not both in one sentence. \n\n```\n{print} Welcome at Hedy's\n{ask} What would you like to eat?\n{echo} So you want \n{ask} what would you like to drink?\n{echo} So you want \n```\nIf the player types a hamburger and coke, you can't say `so you would like a hamburger and coke`, but you have to make two separate line. \nAlso, the `{echo}` command only echoes the word at the end of the sentence. So you can't say `your hamburger is coming right up!`.\n\nThat changes in level 2. In level 2 you'll learn to work with variables, that allow you to save multiple pieces of information and print them in any place you want.\nSo let's go to the next level!\n"
                start_code: "{print} Let's go!"
                story_text_2: "If the player types a hamburger and coke, you can't say `so you would like a hamburger and coke`, but you have to make two separate line. \nAlso, the `{echo}` command only echoes the word at the end of the sentence. So you can't say `your hamburger is coming right up!`.\n\nThat changes in level 2. In level 2 you'll learn to work with variables, that allow you to save multiple pieces of information and print them in any place you want.\nSo let's go to the next level!\n"
                example_code: "```\n{print} Welcome at Hedy's\n{ask} What would you like to eat?\n{echo} So you want \n{ask} what would you like to drink?\n{echo} So you want \n```\n"
            3:
                story_text: "## What's next?\nIn this level you've been practising with variables, but maybe you've come across this mistake.\n\nTry to run this code:\n```\nname {is} Sophie\n{print} My name is name\n```\nOf course you wanted to print `My name is Sophie` but Hedy prints `My Sophie is Sophie`. \nIn the next level this problem is fixed by using quotation marks.\n"
                start_code: "{print} Let's go to the next level!"
            5:
                story_text: "## What's next?\nNow you've reached the end of this level, so you have learned `{ask}` and `{if}`. For example you can {ask} guests what they would like to eat.\nWhat you can't yet do though, is calculate the price for everyone's dinner.\n\nThe next level makes it possible to use addition, subtraction and multiplication in your programs. This way you can calculate the prices in your restaurant, but you could also add a secret code to give your friends and family a discount.\nAnother option in the next level is programming your own maths game, for your little brother or sister to practice their multiplications.\nGo see for yourself in the next level!\n```\n{print} 'Welcome at McHedy'\norder {is} {ask} 'What would you like to eat?'\n{print} 'You would like ' order\n{if} order {is} hamburger price {is} 5\n{if} order {is} fries price {is} 2\ndrinks {is} {ask} 'What would you like to drink?'\n{print} 'You would like ' drinks\n{print} 'That will be ' price ' dollars for your ' order ' please'\n{print} 'The drinks are free in this level because Hedy cant calculate the price yet...'\n```\n"
                start_code: "{print} 'On to the next level!'"
                example_code: "## Free drinks!\n```\n{print} 'Welcome at McHedy'\norder {is} {ask} 'What would you like to eat?'\n{print} 'You would like ' order\n{if} order {is} hamburger price {is} 5\n{if} order {is} fries price {is} 2\ndrinks {is} {ask} 'What would you like to drink?'\n{print} 'You would like ' drinks\n{print} 'That will be ' price ' dollars for your ' order ' please'\n{print} 'The drinks are free in this level because Hedy cant calculate the price yet...'\n```\n"
            6:
                story_text: "## What's next?\n Great job! You've reached the end of this level, which means you have practiced with `{if}` and `{else}`. You have probably noticed that your codes are getting longer and longer.\n For example {if} you want to program 'Happy Birthday'\n\n ```\n {print} 'happy birthday to you'\n {print} 'happy birthday to you'\n {print} 'happy birthday dear Hedy'\n {print} 'happy birthday to you'\n\n ```\n That's a lot of code for mainly the same words over and over again. Luckily in the next level has a solution with the `{repeat}` command, that allows you to repeat a line of code multiple times.\n"
                start_code: "{print} 'On to the next level!'"
                example_code: " ```\n {print} 'happy birthday to you'\n {print} 'happy birthday to you'\n {print} 'happy birthday dear Hedy'\n {print} 'happy birthday to you'\n ```\n"
            8:
                story_text: "## What's next?\nGreat job! You've reached the end of another level! In this level you've learned to use multiple lines of code in an {if} or {repeat} command. But you can't yet combine the two...\nGood news! In the next level you will be allowed to put an {if} inside an {if}, or inside a {repeat} command.\n\nFor example:\n```\nanswer = {ask} 'Would you like to go to teh next level?'\n{if} answer {is} 'yes'\n    {print} 'Great! You can use the {repeat} commando in the {if} command!'\n    {print} 'Hooray!'\n    {print} 'Hooray!'\n    {print} 'Hooray!'\n{else}\n    {print} 'Okay, you can stay here for a little longer!'\n```\nIn this code Hedy will still say 'Your drink is on its way' even {if} you didn't even want to drink something! In the next level this will be fixed!\n"
                start_code: "{print} 'Lets go to the next level!'"
                example_code: "```\nanswer = {ask} 'Would you like to go to the next level?'\n{if} answer {is} yes\n    {print} 'Great! You can use the {repeat} commando in the {if} command!'\n    {print} 'Hooray!'\n    {print} 'Hooray!'\n    {print} 'Hooray!'\n{else}\n    {print} 'Okay, you can stay here for a little longer!'\n```\n"
            11:
                story_text: "## What's next?\nMaybe you have tried using decimal numbers in your restaurant adventure. If you did, you probably noticed that Hedy didn't understand them yet and always rounded off.\nFrom the next level on you can use decimal numbers.\n\nAnother cool feauture in the next level is that you can use mulitiple words in a variable.\nFor intance, you could already do this...\n```\nname = {ask} 'Who is your favorite cartoon character?'\n{print} 'I love watching ' name\n```\nBut you couldn't use multiple words in a variable like the example below. This program does not work yet in this level!\n```\nshow = SpongeBob SquarePants\n{print} show 'is my favorite show!'\n```\nGo to the next level to make this code work!\n"
                start_code: "{print} 'Lets go to the next level!'"
                example_code: "```\nname = {ask} 'Who is your favorite cartoon character?'\n{print} 'I love watching ' name\n```\nBut you couldn't use multiple words in a variable like the example below. This program does not work yet in this level!\n```\nshow = SpongeBob SquarePants\n{print} show 'is my favorite show!'\n```\nGo to the next level to make this code work!\n"
            12:
                story_text: "## What's next?\nIn the previous levels you learned how to put two `{if}`commands inside each other. This works fine, but it does give you very long and unhandy codes like this one:\n```\nusername {is} {ask} 'What is your username?'\npassword {is} {ask} 'What is your password?'\n{if} username {is} 'Hedy'\n    {if} password {is} 'secret'\n        {print} 'Welcome Hedy!'\n    {else}\n        {print} 'Access denied'\n{else}\n    {print} 'Access denied!'\n```\nIn this system you have to give both the correct username and the correct password.\nIn the next level you will learn the `{and}` command that will make this code a ot shorter and more understandable!\nCheck it out!\n"
                start_code: "{print} 'Lets go to the next level!'"
                example_code: "```\nusername {is} {ask} 'What is your username?'\npassword {is} {ask} 'What is your password?'\n{if} username {is} 'Hedy'\n    {if} password {is} 'secret'\n        {print} 'Welcome Hedy!'\n    {else}\n        {print} 'Access denied'\n{else}\n    {print} 'Access denied!'\n```\n"
            18:
                story_text: "## What's next?\nCongratulations! You have reached the last level of Hedy! But no worries, we are working very hard to create more levels and new adventures. So please come back later to check out the newest levels!\n"
                start_code: "{print} ('Great job!!!')"
            15:
                story_text: "## What's next?\nIn the next level we will grow a bit more towards real Python code. thon code. You will also learn how to match two lists together.\nThis way you can program a code in which the correct animal is matched to the right sound.\nBecause the two codes below... Are obviously nonsense!\n```\nanimals = 'chicken', 'horse', 'cow'\nsounds = 'cluck', 'neigh', 'moo'\n{for} animal {in} animals\n    {print} 'A ' animal ' says ' sounds {at} {random}\n```\nYou could also try to make it work this way, but....\n```\nanimals = 'chicken', 'horse', 'cow'\nsounds = 'cluck', 'neigh', 'moo'\n{for} animal {in} animals\n    {for} sound {in} sounds\n        {print} 'A ' animal ' says ' sound\n```\n"
                start_code: "{print} 'Lets go to the next level!'"
                example_code: "```\nanimals = 'chicken', 'horse', 'cow'\nsounds = 'cluck', 'neigh', 'moo'\n{for} animal {in} animals\n    {print} 'A ' animal ' says ' sounds {at} {random}\n```\nYou could also try to make it work this way, but....\n```\nanimals = 'chicken', 'horse', 'cow'\nsounds = 'cluck', 'neigh', 'moo'\n{for} animal {in} animals\n    {for} sound {in} sounds\n        {print} 'A ' animal ' says ' sound\n```\n"
            16:
                story_text: "## What's next?\nIn the next level it's time for a new command. You might have noticed in the previous levels that `{if}` and `{else}` sometimes aren't enough.\nFor example in this code:\n```\n{print} 'What is for dinner tonight?'\noptions = ['pizza', 'broccoli', 'green beans']\nchosen = options {at} {random}\n{if} chosen = pizza\n    {print} 'Yummy! Pizza!'\n{else}\n    {print} 'Yikes...'\n```\nIn this code it would be great to have 2x an `{else}` so you could have one option for the broccoli and one for the green beans. The next level comes with the new command `{elif}` that makes this possible!\nSo check out the next level now!\n"
                start_code: "{print} 'Lets go to the next level!'"
                example_code: "```\n{print} 'What is for dinner tonight?'\noptions = ['pizza', 'broccoli', 'green beans']\nchosen = options {at} {random}\n{if} chosen = 'pizza'\n    {print} 'Yummy! Pizza!'\n{else}\n    {print} 'Yikes...'\n```\n"
                story_text_2: In this code it would be great to have 2x an `{else}` so you could have one option for the broccoli and one for the green beans. The next level comes with the new command `{elif}` that makes this possible! So check out the next level now!
            7:
                story_text: "## What's next?\nNow you've learned how to repeat one single line of code. This comes in handy, but it's not always enough. Sometimes you want to repeat multiple lines at once.\nthe next level allows you to group a couple of lines of code, and repeat that little group of lines all at once!\n\n```\n{repeat} 5 {times} {print} 'In the next level you can repeat multiple lines of code at once!'\n```\n"
                start_code: "{print} 'Lets go to the next level!'"
                example_code: "```\n{repeat} 5 {times} {print} 'In the next level you can repeat multiple lines of code at once!'\n```\n"
            10:
                start_code: "{print} 'Lets go to the next level!'"
                story_text: "## What's next?\nYou have reached the end of this level, you're doing great! You are about to go to the next level. In the higher levels, Hedy is focussing more and more on teaching you the programming language Python.\nIn Python there is no `{repeat}` command, but there is a command that works like {repeat}. Are you curious to find out how to say `{repeat}` in Python language? Quickly go on to find out!\n"
            17:
                start_code: "{print} 'Lets go to the next level!'"
                story_text: "## What's next?\nIn the next level you will learn a real Python way to use `{print}`.\n"
    haunted:
        levels:
            14:
                story_text: "## Haunted House\nIn this level you can use the `<` and `>` symbol to introduce lives to your game.\n"
                example_code: "```\n{print} 'Escape from the haunted house'\nlives = 3\ndoors = 1, 2, 3\nmonsters = 'the wicked witch', 'a zombie', 'a sleeping 3 headed dog'\n{for} i {in} {range} 1 {to} 10\n    {if} lives > 0\n        good_door = doors {at} {random}\n        monster = monsters {at} {random}\n        chosen_door = {ask} 'Which door do you choose?'\n        {if} good_door == chosen_door\n            {print} 'You have chosen the correct door'\n        {else}\n            {print} 'You see...' monster\n            {if} monster == 'a sleeping 3 headed dog'\n                {print} 'Pffieuw.... Its asleep'\n            {else}\n                {print} 'You lose one life'\n                lives = lives -1\n    {else}\n        {print} 'GAME OVER'\n```\n"
                start_code: '# place your code here'
            4:
                story_text: "## Haunted house\nIn this level you learn how to use quotation marks in your games.\nCan you make your Haunted House level 4 proof?\n"
                start_code: '# place your code here'
                example_code: "```\n{print} _Escape from the haunted house!_\n{print} _There are 3 doors in front of you..._\nchoice {is} {ask} _Which door do you choose?_\n{print} _You picked door ..._ choice\nmonsters {is} a zombie, a vampire, NOTHING YOUVE ESCAPED\n{print} _You see..._\n{sleep}\n{print} monsters {at} {random}\n ```\n"
            16:
                story_text: "## Haunted House Game\nThis haunted house game uses the connection between the lists you can use in this level.\nFor example: all the properties that belong to the zombie are first in all the lists, witch second and vampire third.\nCheck out the code!\n"
                example_code: "```\nnumbers = [1, 2, 3]\ni = numbers[random]\nhint = ['growling', 'a cackling laugh', 'fluttering batwings']\nmonsters = ['zombie', 'witch', 'vampire']\nbad_fate = ['Your brain is eaten', 'You are forever cursed', 'You are bitten']\ngood_fate = ['You throw the ham. The zombie is distracted and starts etaing it.', 'You set the curtains on fire. The witch flees out of fear for the fire', 'The vampire hates garlic and flees']\nweapons = ['ham', 'lighter', 'garlic']\n{print} 'You are standing in front of an old mension'\n{print} 'Something is not right here'\n{print} 'You hear ' hint[i]\n{print} 'You are going to explore it'\n{print} 'You enter the kitchen en see a lighter, a raw ham and a garlic.'\nyour_weapon = {ask} 'What do you bring with you?'\n{print} 'With your ' your_weapon ' you enter the living room'\n{print} 'There you find a ' monsters[i]\nneeded_weapon = weapons[i]\n{if} your_weapon == needed_weapon\n    {print} 'You use your ' your_weapon\n    {print} good_fate[i]\n    {print} 'YOU WIN!'\n{else}\n    {print} 'You have chosen the wrong weapon...'\n    {print} bad_fate[i]\n    {print} 'GAME OVER'\n```\n"
                start_code: '# place your code here'
            1:
                story_text: "## Haunted house\nIn this adventure you are working towards making a game in which you have to escape from a haunted house by picking the correct door.\nIf you pick the right door you'll survive, but {if} not a terrible monster might...\n\nIn level 1 we start our haunted house game by making up a scary story and {ask} the player what monster they'll see in the haunted house.\n"
                example_code: "\n```\n{print} How did I get here?\n{print} I remember my friend telling me to go into the old mansion...\n{print} and suddenly everything went black.\n{print} But how did I end up on the floor...?\n{print} My head hurts like Ive been hit by a baseball bat!\n{print} What's that sound?\n{print} Oh no! I feel like Im not alone in this house!\n{print} I need to get out of here!\n{print} There are 3 doors in front of me..\n{ask} Which door should i pick?\n{echo} I choose door\n{print} ...?\n```\n\n## Challenge\nCan you finish the scary story? Or make up your own haunted house story?\n"
                start_code: '{print} How did I get here?'
                story_text_2: "## Challenge\nCan you finish the scary story? Or make up your own haunted house story?\n"
            2:
                story_text: "## Haunted House\nIn this haunted house you can choose your monsters with emojis. Of course you could also use words.\n\n```\nmonster1 {is} \U0001F47B\nmonster2 {is} \U0001F921\nmonster3 {is} \U0001F476\n{print} You enter the haunted house.\n{print} Suddenly you see a monster1\n{print} You run into the other room, but a monster2 is waiting there for you!\n{print} Oh no! Quickly get to the kitchen.\n{print} But as you enter monster3 attacks you!\n```\n"
                start_code: monster1 {is} _
                example_code: "```\nmonster_1 {is} \U0001F47B\nmonster_2 {is} \U0001F921\nmonster_3 {is} \U0001F476\n{print} You enter the haunted house.\n{print} Suddenly you see a monster_1\n{print} You run into the other room, but a monster_2 is waiting there for you!\n{print} Oh no! Quickly get to the kitchen.\n{print} But as you enter monster_3 attacks you!\n```\n"
            11:
                story_text: "## Haunted House\nIn this level we've changed the repeat command and we've added a line to our haunted house that tells the player in which room they are.\n"
                example_code: "```\n{print} 'Escape from the Haunted House!'\nplayer {is} alive\ndoors = 1, 2, 3\nmonsters = zombie, vampire, giant spider\n{for} i {in} {range} 1 {to} 3\n    {if} player {is} alive\n        correct_door = doors {at} {random}\n        {print} 'Room ' i\n        {print} 'There are 3 doors in front of you...'\n        chosendoor = {ask} 'Which door do you choose?'\n        {if} chosendoor {is} correct_door\n            {print} 'No monsters here!'\n        {else}\n            {print} 'You are eaten by a ' monsters {at} {random}\n            player = dead\n    {else}\n        {print} 'GAME OVER'\n{if} player {is} alive\n    {print} 'Great! You survived!'\n```\n"
                start_code: "{print} 'Escape from the haunted house!'"
            9:
                story_text: "## Haunted House\nIn this level you can use nesting, which allows you to make the haunted house even more interactive!\n"
                example_code: "```\n{print} 'Escape from the Haunted House!'\nplayer = alive\ndoors = 1, 2, 3\nmonsters = zombie, vampire, giant spider\n{repeat} 3 {times}\n    {if} player {is} alive\n        correct_door {is} doors {at} {random}\n        {print} 'There are 3 doors in front of you...'\n        chosen_door = {ask} 'Which door do you choose?'\n        {if} chosen_door {is} correct_door\n            {print} 'No monsters here!'\n        {else}\n            {print} 'You are eaten by a ' monsters {at} {random}\n            player = dead\n    {else}\n        {print} 'GAME OVER'\n{if} player {is} alive\n    {print} 'Great! You survived!'\n```\n## Challenge\nNow it's very hard to win this game, can you make it easier to win?\nFor example by only having 1 wrong door and 2 correct doors instead of 1 correct door en 2 wrong ones?\n"
                start_code: "{print} 'Escape from the haunted house!'"
            5:
                story_text: "## Haunted House\nUp until this level the haunted house game always asked the player to choose a door, but as you might have noticed, they didn't really have to answer correctly.\nIf the player filled in a completely random answer, the game would still work and the player might even win (despite not picking a door).\nIn this level you can only win the game by picking the same door Hedy picked randomly.\n"
                example_code: "```\n{print} 'Escape from the haunted house!'\n{print} 'There are 3 doors in front of you...'\ndoors {is} 1, 2, 3\nmonsters {is} werewolf, mummy, vampire, zombie\nchosen_door {is} {ask} 'Which door do you choose?'\n{print} 'You chose door...' chosen_door\n{sleep}\ncorrect_door {is} doors {at} {random}\n{if} chosen_door {is} correct_door {print} 'Great! Youve escaped!'\n{else} {print} 'Oh no! You are being eaten by a...' monsters {at} {random}\n```\n"
                start_code: '# place your code here'
            3:
                story_text: "## Haunted house game\nIn the previous levels you've made an introduction to your haunted house game, but as you might have noticed the story would always have a dreadful end.\nIn this level you can make your story more interactive by changing the outcome of the game; sometimes you'll get eaten, sometimes you'll escape!\nLet Hedy decide randomly!\n"
                example_code: "```\n{print} Escape from the haunted house!\n{print} There are 3 doors in front of you...\nchoice {is} {ask} Which door do you choose?\n{print} You picked door ... choice\nmonsters {is} a zombie, a vampire, NOTHING YOUVE ESCAPED\n{print} You see...\n{sleep}\n{print} monsters {at} {random}\n```\n\n## Challenge\nThis story is pretty straight {forward}, maybe you can spook it up a bit by adding a more exciting story.\nAlso you have very limited outcomes right now, there are only 3 options of what's behind the doors. Maybe you can think of more monsters to add to the list!\n\n## Change the game into a tv gameshow!\nLastly, we'd like to challenge you to change this game into a gameshow (like the ones on tv) where you choose a door or suitcase and it contains a big price!\nCan you do it?\n"
                start_code: '# place your code here'
                story_text_2: "## Challenge\nThis story is pretty straight {forward}, maybe you can spook it up a bit by adding a more exciting story.\nAlso you have very limited outcomes right now, there are only 3 options of what's behind the doors. Maybe you can think of more monsters to add to the list!\n\n## Change the game into a tv gameshow!\nLastly, we'd like to challenge you to change this game into a gameshow (like the ones on tv) where you choose a door or suitcase and it contains a big price!\nCan you do it?\n"
        name: Haunted House
        description: escape from the haunted house
        default_save_name: Haunted House
    piggybank:
        levels:
            12:
                story_text: "## Piggy Bank\nIn this adventure you learn how to make a digital piggy bank, to calculate how much money you have and how long you need to save up to buy what you want!\n"
                example_code: "```\n{print} 'The digital piggy bank'\nwish = {ask} 'What would you like to buy?'\nprice = {ask} 'How much does that cost?'\nsaved = {ask} 'How much money have you saved already?'\nallowance = {ask} 'How much pocket money do you get per week?'\nto_save = price - saved\nweeks = to_save / allowance\n{print} 'You can buy a ' wish ' in ' weeks ' weeks.'\n"
                start_code: '# place your code here'
            14:
                example_code: "```\nmoney = {ask} 'How much money have you saved?'\nwish = {ask} 'How much money do you need?'\nallowance = {ask} 'How much pocket money do you get each week?'\nto_save = wish - money\nweeks = to_save / allowance\n{if} wish > money\n    {print} 'You need to save up some more!'\n    {print} 'Youll need ' weeks ' more weeks.'\n{else}\n    {print} 'Great! You have enough'\n    {print} 'Lets go shopping!'\n```\n"
                story_text: "## Piggybank\nIn this level you can let Hedy tell you {if} you have saved up enough money!\n"
                start_code: '# place your code here'
        name: Piggy Bank
        description: Count your pocketmoney!
        default_save_name: Piggy Bank
    quizmaster:
        name: Quizmaster
        description: Make your own quiz!
        default_save_name: Quizmaster
        levels:
            14:
                story_text: "## Make your own quiz\nIn this adventure you can make your own quiz! Fill in the blanks, add more questions and enjoy your own quiz!\nYou can make a quiz about anything you like: your hobby, your favorite animal, your favorite book or anything at all!\n"
                example_code: "```\n{print} 'Make your own quiz'\npoints_a = 0\npoints_b = 0\n{print} 'Question'\n{print} 'Answer option A'\n{print} 'Answer option B'\nanswer = {ask} 'Which answer?'\n{if} answer == 'A'\n    points_a = points_a + 1\n{if} answer == 'B'\n    points_b = points_b + 1\n{print} 'End of the quiz!'\n{print} 'Lets see the results!'\n{if} points_a > points_b\n    {print} 'You belong to the A club'\n{if} points_b > points_a\n    {print} 'You belong to the B club'\n```\n"
                start_code: '# place your code here'
    language:
        levels:
            16:
                story_text: "## Learn a new language\nMake your own program to practice your vocabulary in a new language.\n"
                example_code: "```\nfrench_words = ['bonjour', 'ordinateur', 'pomme de terre']\ntranslation = ['hello', 'computer', 'potato']\nscore = 0\n{for} i {in} {range} 1 {to} 3\n    answer = {ask} 'What does ' french_words[i] ' mean?'\n    correct = translation[i]\n    {if} answer == correct\n        {print} 'Correct!'\n        score = score + 1\n    {else}\n        {print} 'Wrong, ' french_words[i] ' means ' translation[i]\n{print} 'You gave ' score ' correct answers.'\n```\n"
                start_code: '# place your code here'
            5:
                story_text: "## Learn a new language\nMake your own program to practice your vocabulary in a new language.\n\n```\n{print} 'Learn French!'\ncat {is} {ask} '\U0001F431'\n{if} cat {is} chat {print} 'Terrific!'\n{else} {print} 'No, cat is chat'\nfrog {is} {ask} '\U0001F438'\n{if} frog {is} grenouille {print} 'Super!'\n{else} {print} 'No, frog is grenouille'\n```\n"
                start_code: '# place your code here'
                example_code: "```\n{print} 'Learn French!'\ncat {is} {ask} '\U0001F431'\n{if} cat {is} chat {print} 'Terrific!'\n{else} {print} 'No, cat is chat'\nfrog {is} {ask} '\U0001F438'\n{if} frog {is} grenouille {print} 'Super!'\n{else} {print} 'No, frog is grenouille'\n```\n"
        name: Language
        description: Practice words in a foreign language
        default_save_name: language
    secret:
        levels:
            12:
                story_text: "## Make a secret code like a super spy\nIn this adventure you can create your own super spy code. Encode a message that only the right agent can decipher.\nIf the enemy tries to crack the code, they will get some false info to waste their time.\n"
                example_code: "```\nname is ask 'What is your name?'\nif name is 'Agent007'\n    a is 'Go to the airport '\nelse\n    a is 'Go to the trainstation '\npassword is ask 'What is the password?'\nif password is 'TOPSECRET'\n    b is 'tomorrow at 02.00'\nelse\n    b is 'today at 10.00'\nprint a + b\n```\n"
                start_code: '## place your code here'
            13:
                story_text: "## Superspy\nThe code you made in the previous level can be made a lot easier in this one with the `{and}` command.\n"
                example_code: "```\nname is ask 'What is your name?'\npassword is ask 'What is your password?'\nif name is 'Agent007' and password is 'TOPSECRET'\n    print 'Go to the airport at 02.00'\nelse\n    print 'Go to the trainstation at 10.00'\n ```\n"
                start_code: '## place your code here'
        name: SuperSpy
        description: Make your own spy code
        default_save_name: language
    tic:
        name: Tic Tac Toe
        description: Play a game of Tic Tac Toe!
        default_save_name: Tic
        levels:
            14:
                story_text: "## Tic Tac Toe\nIn the previous levels you've made a tic tac toe game. Now you've learned how to use the = sign, the == sign and the != sign.\nYou can use this knowledge in your new Taic Tac Toe game, like this:\n"
                start_code: '## place your code here'
                example_code: "```\nsign = 'x'\nopen_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{for} i {in} {range} 1 {to} 9\n    {if} game != 'over'\n        choice = {ask} 'Player ' sign ', which spot?'\n        {if} choice {in} open_spots\n            {remove} choice {from} open_spots\n            {if} choice == 1\n                spot_1 = sign\n            {if} choice == 2\n                spot_2 = sign\n            {if} choice == 3\n                spot_3 = sign\n            {if} choice == 4\n                spot_4 = sign\n            {if} choice == 5\n                spot_5 = sign\n            {if} choice == 6\n                spot_6 = sign\n            {if} choice == 7\n                spot_7 = sign\n            {if} choice == 8\n                spot_8 = sign\n            {if} choice == 9\n                spot_9 = sign\n        {else}\n            {print} 'That spot was already taken'\n        {print} spot_1 spot_2 spot_3\n        {print} spot_4 spot_5 spot_6\n        {print} spot_7 spot_8 spot_9\n        {print} ' '\n        winner = {ask} 'Did you win?'\n        {if} winner == 'yes'\n            {print} 'Good job, player ' sign '!'\n            game = 'over'\n        {else}\n            {if} sign == 'x'\n                sign = 'o'\n            {else}\n                sign = 'x'\n```\n"
            15:
                story_text: "## Tic Tac Toe\nIn this level you can improve your Tic Tac Toe game with the {while} loop/ With this loop you can combine the `{if} game != 'over'` and the `{for} i {in} {range} 1 to 9` into one simple line.\nCheck it out:\n"
                start_code: '## place your code here'
                example_code: "```\nsign = 'x'\nopen_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{while} game != 'over'\n    choice = {ask} 'Player ' sign ', which spot?'\n    {if} choice {in} open_spots\n        {remove} choice {from} open_spots\n        {if} choice == 1\n            spot_1 = sign\n        {if} choice == 2\n            spot_2 = sign\n        {if} choice == 3\n            spot_3 = sign\n        {if} choice == 4\n            spot_4 = sign\n        {if} choice == 5\n            spot_5 = sign\n        {if} choice == 6\n            spot_6 = sign\n        {if} choice == 7\n            spot_7 = sign\n        {if} choice == 8\n            spot_8 = sign\n        {if} choice == 9\n            spot_9 = sign\n    {else}\n        {print} 'That spot was already taken'\n    {print} spot_1 spot_2 spot_3\n    {print} spot_4 spot_5 spot_6\n    {print} spot_7 spot_8 spot_9\n    {print} ' '\n    winner = {ask} 'Did you win?'\n    {if} winner == 'yes'\n        {print} 'Good job, player ' sign '!'\n        game = 'over'\n    {else}\n        {if} sign == 'x'\n            sign = 'o'\n        {else}\n            sign = 'x'\n```\n"
            17:
                start_code: '## place your code here'
                story_text: "## Tic Tac Toe\nIn the previous levels the tic tac toe game had an annoying feature. After every move, you had to fill in yourself if you had won or not.\nThis made the game playable, but also quite slow. In this level we have learned the `{elif}` command, that could solve that problem.\nTo use the {elif} to let Hedy check whether or not a player has won is fun, but it also requires a fair amount of extra lines.\n\nIn the example code you see that we added the requirements to win (3 spots in a row horizontally, vertically or diagonally).\nYou can find them in line 46 to 69. You can see that each time the requirement is met (so if a player has won) the variable game is set to 'over'.\nThis means that the {while} loop will be stopped and the game ends.\n"
                example_code: "```\nsign = 'x'\nopen_spots = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{while} game != 'over':\n    choice = {ask} 'Player ' sign ', which spot?'\n    {if} choice {in} open_spots:\n        {remove} choice {from} open_spots\n        {if} choice == 1:\n            spot_1 = sign\n        {if} choice == 2:\n            spot_2 = sign\n        {if} choice == 3:\n            spot_3 = sign\n        {if} choice == 4:\n            spot_4 = sign\n        {if} choice == 5:\n            spot_5 = sign\n        {if} choice == 6:\n            spot_6 = sign\n        {if} choice == 7:\n            spot_7 = sign\n        {if} choice == 8:\n            spot_8 = sign\n        {if} choice == 9:\n            spot_9 = sign\n    {else}:\n        {print} 'That spot was already taken'\n    {print} spot_1 spot_2 spot_3\n    {print} spot_4 spot_5 spot_6\n    {print} spot_7 spot_8 spot_9\n    {print} ' '\n    {if} spot_1 == spot_2 {and} spot_2 == spot_3 {and} spot_1 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_4 == spot_5 {and} spot_5 == spot_6 {and} spot_4 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_7 == spot_8 {and} spot_8 == spot_9 {and} spot_7 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_1 == spot_4 {and} spot_4 == spot_7 {and} spot_1 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_2 == spot_5 {and} spot_5 == spot_8 {and} spot_2 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_3 == spot_6 {and} spot_6 == spot_9 {and} spot_3 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_1 == spot_5 {and} spot_5 == spot_9 {and} spot_1 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_3 == spot_5 {and} spot_5 == spot_7 {and} spot_3 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {else}:\n        {if} sign == 'x':\n            sign = 'o'\n        {else}:\n            sign = 'x'\n```\n"
            13:
                story_text: "## Tic Tac Toe\nIn this adventure you can program a game of Tic Tac Toe. You can play with two people. Taking turns, you pick a number of the spot (1 - 9) you want to put your sign (x or o) on.\nThe first player that gets 3 in a row (horizontally, vertically or diagonally) wins!\nHave fun!\n"
                example_code: "```\nsign = 'x'\nopen_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{for} i {in} {range} 1 {to} 9\n    {if} game {is} 'on'\n        choice = {ask} 'Player ' sign ', which spot?'\n        {if} choice {in} open_spots\n            {remove} choice {from} open_spots\n            {if} choice {is} 1\n                spot_1 = sign\n            {if} choice {is} 2\n                spot_2 = sign\n            {if} choice {is} 3\n                spot_3 = sign\n            {if} choice {is} 4\n                spot_4 = sign\n            {if} choice {is} 5\n                spot_5 = sign\n            {if} choice {is} 6\n                spot_6 = sign\n            {if} choice {is} 7\n                spot_7 = sign\n            {if} choice {is} 8\n                spot_8 = sign\n            {if} choice {is} 9\n                spot_9 = sign\n        {else}\n            {print} 'That spot was already taken'\n        {print} spot_1 spot_2 spot_3\n        {print} spot_4 spot_5 spot_6\n        {print} spot_7 spot_8 spot_9\n        {print} ' '\n        winner = {ask} 'Did you win?'\n        {if} winner {is} 'yes'\n            {print} 'Good job, player ' sign '!'\n            game = 'over'\n        {else}\n            {if} sign {is} 'x'\n                sign = 'o'\n            {else}\n                sign = 'x'\n```\n"
                start_code: '## place your code here'
    blackjack:
        name: Blackjack
        description: Try to get as close to 21 as you can
        default_save_name: Blackjack
        levels:
            17:
                story_text: "## Create a game of Blackjack\nBlackjack is a simple game of cards in which you have to get as close to 21 points as possible. You get two cards. Each card is worth their numeral value, and the face cards (Jack, Queen and King) are worth 10 points.\nThe Ace is worth either 1 or 11 points (you can choose). The dealer, your opponent, also gets two cards.\nIf you want, you can get another card, and its points will be added to your total. The dealer can also choose to take another card.\nBut be careful not to get more than 21 points, because if you do, you lose!\nThe player who gets closest to 21, without going over it, wins!\n\nHave fun!\n"
                example_code: "```\n{print} 'BLACKJACK'\ncards = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'Jack', 'Queen','King', 'Ace']\npoints = 0\ndealer_points = 0\ncard_1 = cards[{random}]\ncard_2 = cards[{random}]\ncard_3 = cards [{random}]\ndealer_card_1 = cards[{random}]\ndealer_card_2 = cards[{random}]\ndealer_card_3 = cards[{random}]\n# Points for card 1\n{if} card_1 == 'Jack' {or} card_1 == 'Queen' {or} card_1 == 'King':\n    points = points + 10\n{elif} card_1 == 'Ace':\n    points = points + 11\n{else}:\n    points = points + card_1\n# Points for card 2\n{if} card_2 == 'Jack' {or} card_2 == 'Queen' {or} card_2 == 'King':\n    points = points + 10\n{elif} card_2 == 'Ace':\n    points = points + 11\n{else}:\n    points = points + card_2\n# Points for dealer card 1\n{if} dealer_card_1 == 'Jack' {or} dealer_card_1 == 'Queen' {or} dealer_card_1 == 'King':\n    dealer_points = dealer_points + 10\n{elif} dealer_card_1 == 'Ace':\n    dealer_points = dealer_points + 11\n{else}:\n    dealer_points = dealer_points + dealer_card_1\n# Points for dealer card 2\n{if} dealer_card_2 == 'Jack' {or} dealer_card_2 == 'Queen' {or} dealer_card_2 == 'King':\n    dealer_points = dealer_points + 10\n{elif} dealer_card_2 == 'Ace':\n    dealer_points = dealer_points + 11\n{else}:\n    dealer_points = dealer_points + dealer_card_2\n# Two Aces\n{if} card_1 == 'Ace' {and} card_2 == 'Ace':\n    points = 12\n{if} dealer_card_1 == 'Ace' {and} dealer_card_2 == 'Ace':\n    dealer_points = 12\n# Scoreboard\n{print} 'You have a ' card_1 ' and a ' card_2 ' (' points ' points)'\n{print} 'The dealer has a ' dealer_card_1 ' and a ' dealer_card_2 ' (' dealer_points ' points)'\n# Extra card for the player\nhit = {ask} 'Do you want an extra card?'\n{if} hit == 'yes':\n    {if} card_3 == 'Jack' {or} card_3 == 'Queen' {or} card_3 == 'King':\n        points = points + 10\n    {elif} card_3 == 'Ace':\n        {if} points > 11:\n            points = points + 11\n        {else}:\n            points = points + 1\n    {else}:\n        points = points + card_3\n    print 'You get an extra ' card_3 ' (' points ' points)'\n{else}:\n    print 'No extra cards'\n# Winner\n{if} points > 21 {or} dealer_points > points {or} dealer_points == 21:\n    {print} 'You lose'\n{elif} dealer_points < 17:\n    {print} 'The dealer takes an extra card. It is a... ' dealer_card_3\n    {if} dealer_card_3 == 'Jack' {or} dealer_card_3 == 'Queen' {or} dealer_card_3 == 'King':\n        dealer_points = dealer_points + 10\n    {elif} dealer_card_3 == 'Ace':\n        {if} dealer_points < 11:\n            dealer_points = dealer_points + 11\n        {else}:\n            dealer_points = dealer_points + 1\n    {else}:\n        dealer_points = dealer_points + dealer_card_3\n    {print} 'The dealer has ' dealer_points ' points now'\n    {if} dealer_points < 21 {and} dealer_points > points:\n        {print} 'You lose'\n    {else}:\n        {print} 'You win'\n{elif} points > dealer_points {and} points < 21:\n    {print} 'You win!'\n```\n"
                start_code: '# place your code here'
